Index: code/cgame/cg_draw.c
===================================================================
--- code/cgame/cg_draw.c	(revision 3340)
+++ code/cgame/cg_draw.c	(working copy)
@@ -745,7 +745,9 @@
 	const char	*info;
 	const char	*name;
 	int			clientNum;
-
+#ifdef MISSIONPACK
+	int			w;
+#endif
 	if ( cg.predictedPlayerState.stats[STAT_HEALTH] <= 0 ) {
 		return y;
 	}
@@ -780,8 +782,12 @@
 	info = CG_ConfigString( CS_PLAYERS + clientNum );
 	name = Info_ValueForKey(  info, "n" );
 	y += size;
+#ifdef MISSIONPACK
+	w = CG_Text_Width(name, 0.25f, 0);
+	CG_Text_Paint( 635 - w, y + BIGCHAR_HEIGHT + 1, 0.25f, colorWhite, name, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
+#else
 	CG_DrawBigString( 640 - ( Q_PrintStrlen( name ) * BIGCHAR_WIDTH), y, name, 0.5 );
-
+#endif
 	return y + BIGCHAR_HEIGHT + 2;
 }
 
@@ -794,12 +800,16 @@
 	char		*s;
 	int			w;
 
-	s = va( "time:%i snap:%i cmd:%i", cg.snap->serverTime, 
+	s = va( "Time: %i Snap: %i Cmd: %i", cg.snap->serverTime, 
 		cg.latestSnapshotNum, cgs.serverCommandSequence );
+#ifdef MISSIONPACK
+	w = CG_Text_Width(s, 0.25f, 0);
+	CG_Text_Paint( 635 - w, y + BIGCHAR_HEIGHT + 1, 0.25f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
+#else
 	w = CG_DrawStrlen( s ) * BIGCHAR_WIDTH;
 
 	CG_DrawBigString( 635 - w, y + 2, s, 1.0F);
-
+#endif
 	return y + BIGCHAR_HEIGHT + 4;
 }
 
@@ -838,10 +848,15 @@
 		}
 		fps = 1000 * FPS_FRAMES / (float)total;
 
-		s = va( "%ifps", fps );
+		s = va( "%i Fps", fps );
+#ifdef MISSIONPACK
+		w = CG_Text_Width(s, 0.25f, 0);
+		CG_Text_Paint( 635 - w, y + BIGCHAR_HEIGHT + 1, 0.25f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
+#else
 		w = CG_DrawStrlen( s ) * BIGCHAR_WIDTH;
 
 		CG_DrawBigString( 635 - w, y + 2, s, 1.0F);
+#endif
 	}
 
 	return y + BIGCHAR_HEIGHT + 4;
@@ -866,11 +881,16 @@
 	tens = seconds / 10;
 	seconds -= tens * 10;
 
+#ifdef MISSIONPACK
+	s = va( "Time %i:%i%i", mins, tens, seconds );
+	w = CG_Text_Width(s, 0.25f, 0);
+	CG_Text_Paint( 635 - w, y + BIGCHAR_HEIGHT + 1, 0.25f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
+#else
 	s = va( "%i:%i%i", mins, tens, seconds );
 	w = CG_DrawStrlen( s ) * BIGCHAR_WIDTH;
 
 	CG_DrawBigString( 635 - w, y + 2, s, 1.0F);
-
+#endif
 	return y + BIGCHAR_HEIGHT + 4;
 }
 
@@ -1712,9 +1732,13 @@
 
 	// also add text in center of screen
 	s = "Connection Interrupted";
+#ifdef MISSIONPACK
+	w = CG_Text_Width(s, 0.25f, 0);
+	CG_Text_Paint( 320 - w/2, 100, 0.25f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
+#else
 	w = CG_DrawStrlen( s ) * BIGCHAR_WIDTH;
 	CG_DrawBigString( 320 - w/2, 100, s, 1.0F);
-
+#endif
 	// blink the icon
 	if ( ( cg.time >> 9 ) & 1 ) {
 		return;
@@ -2180,8 +2204,8 @@
 	name = cgs.clientinfo[ cg.crosshairClientNum ].name;
 #ifdef MISSIONPACK
 	color[3] *= 0.5f;
-	w = CG_Text_Width(name, 0.3f, 0);
-	CG_Text_Paint( 320 - w / 2, 190, 0.3f, color, name, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
+	w = CG_Text_Width(name, 0.25f, 0);
+	CG_Text_Paint( 320 - w / 2, 190, 0.25f, color, name, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
 #else
 	w = CG_DrawStrlen( name ) * BIGCHAR_WIDTH;
 	CG_DrawBigString( 320 - w / 2, 170, name, color[3] * 0.5f );
@@ -2198,14 +2222,35 @@
 =================
 */
 static void CG_DrawSpectator(void) {
+#ifdef MISSIONPACK
+	char	*s;
+	int		w;
+#endif
 	CG_SetScreenPlacement(PLACE_CENTER, PLACE_BOTTOM);
+#ifdef MISSIONPACK
+	s = "SPECTATOR";
+	w = CG_Text_Width(s, 0.25f, 0);
+
+	CG_Text_Paint(320 - w / 2, 440, 0.25f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
+
+	if ( cgs.gametype == GT_TOURNAMENT ) {
+		s = "Waiting to play";
+	}
+	else {
+		s = "Press ESC and use the JOIN menu to play";
+	}
+
+	w = CG_Text_Width(s, 0.25f, 0);
+	CG_Text_Paint(320 - w / 2, 460, 0.25f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
+#else
 	CG_DrawBigString(320 - 9 * 8, 440, "SPECTATOR", 1.0F);
 	if ( cgs.gametype == GT_TOURNAMENT ) {
-		CG_DrawBigString(320 - 15 * 8, 460, "waiting to play", 1.0F);
+		CG_DrawBigString(320 - 15 * 8, 460, "Waiting to play", 1.0F);
 	}
 	else if ( cgs.gametype >= GT_TEAM ) {
-		CG_DrawBigString(320 - 39 * 8, 460, "press ESC and use the JOIN menu to play", 1.0F);
+		CG_DrawBigString(320 - 39 * 8, 460, "Press ESC and use the JOIN menu to play", 1.0F);
 	}
+#endif
 }
 
 /*
@@ -2234,12 +2279,12 @@
 		sec = 0;
 	}
 #ifdef MISSIONPACK
-	s = va("VOTE(%i):%s yes:%i no:%i", sec, cgs.voteString, cgs.voteYes, cgs.voteNo);
-	CG_DrawSmallString( 0, 58, s, 1.0F );
+	s = va("VOTE (%i): %s Yes: %i No: %i", sec, cgs.voteString, cgs.voteYes, cgs.voteNo);
+	CG_Text_Paint(4, 58, 0.25f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
 	s = "or press ESC then click Vote";
-	CG_DrawSmallString( 0, 58 + SMALLCHAR_HEIGHT + 2, s, 1.0F );
+	CG_Text_Paint(4, 58 + SMALLCHAR_HEIGHT + 2, 0.25f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
 #else
-	s = va("VOTE(%i):%s yes:%i no:%i", sec, cgs.voteString, cgs.voteYes, cgs.voteNo );
+	s = va("VOTE (%i): %s Yes: %i No: %i", sec, cgs.voteString, cgs.voteYes, cgs.voteNo );
 	CG_DrawSmallString( 0, 58, s, 1.0F );
 #endif
 }
@@ -2276,9 +2321,13 @@
 	if ( sec < 0 ) {
 		sec = 0;
 	}
-	s = va("TEAMVOTE(%i):%s yes:%i no:%i", sec, cgs.teamVoteString[cs_offset],
+	s = va("TEAMVOTE (%i): %s Yes: %i No: %i", sec, cgs.teamVoteString[cs_offset],
 							cgs.teamVoteYes[cs_offset], cgs.teamVoteNo[cs_offset] );
+#ifdef MISSIONPACK
+	CG_Text_Paint(4, 90, 0.25f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
+#else
 	CG_DrawSmallString( 0, 90, s, 1.0F );
+#endif
 }
 
 
@@ -2375,7 +2424,12 @@
 =================
 */
 static qboolean CG_DrawFollow( void ) {
+#ifdef MISSIONPACK
+	int			w;
+	const char	*s;
+#else
 	float		x;
+#endif
 	vec4_t		color;
 	const char	*name;
 
@@ -2383,6 +2437,10 @@
 		return qfalse;
 	}
 
+	if ( cg.scoreBoardShowing) {
+		return qfalse;
+	}
+
 	CG_SetScreenPlacement(PLACE_CENTER, PLACE_TOP);
 
 	color[0] = 1;
@@ -2390,15 +2448,18 @@
 	color[2] = 1;
 	color[3] = 1;
 
-
-	CG_DrawBigString( 320 - 9 * 8, 24, "following", 1.0F );
-
 	name = cgs.clientinfo[ cg.snap->ps.clientNum ].name;
+#ifdef MISSIONPACK
+	s = va("Following %s", name );
+	w = CG_Text_Width(s, 0.5f, 0);
+	CG_Text_Paint( 320 - w / 2, 60, 0.5f, color, s, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
+#else
+	CG_DrawBigString( 320 - 9 * 8, 24, "Following", 1.0F );
 
 	x = 0.5 * ( 640 - GIANT_WIDTH * CG_DrawStrlen( name ) );
 
 	CG_DrawStringExt( x, 40, name, color, qtrue, qtrue, GIANT_WIDTH, GIANT_HEIGHT, 0 );
-
+#endif
 	return qtrue;
 }
 
@@ -2422,7 +2483,16 @@
 	}
 
 	CG_SetScreenPlacement(PLACE_CENTER, PLACE_TOP);
+#ifdef MISSIONPACK
+	if ( cg.lowAmmoWarning == 2 ) {
+		s = "Out of Ammo";
+	} else {
+		s = "Low Ammo Warning";
+	}
 
+	w = CG_Text_Width(s, 0.25f, 0);
+	CG_Text_Paint(320 - w / 2, 64, 0.25f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
+#else
 	if ( cg.lowAmmoWarning == 2 ) {
 		s = "OUT OF AMMO";
 	} else {
@@ -2430,6 +2500,7 @@
 	}
 	w = CG_DrawStrlen( s ) * BIGCHAR_WIDTH;
 	CG_DrawBigString(320 - w / 2, 64, s, 1.0F);
+#endif
 }
 
 
@@ -2459,13 +2530,13 @@
   proxTick = 10 - ((cg.time - proxTime) / 1000);
 
   if (proxTick > 0 && proxTick <= 5) {
-    Com_sprintf(s, sizeof(s), "INTERNAL COMBUSTION IN: %i", proxTick);
+    Com_sprintf(s, sizeof(s), "Internal Combustion in: %i", proxTick);
   } else {
-    Com_sprintf(s, sizeof(s), "YOU HAVE BEEN MINED");
+    Com_sprintf(s, sizeof(s), "You have been mined");
   }
 
-	w = CG_DrawStrlen( s ) * BIGCHAR_WIDTH;
-	CG_DrawBigStringColor( 320 - w / 2, 64 + BIGCHAR_HEIGHT, s, g_color_table[ColorIndex(COLOR_RED)] );
+	w = CG_Text_Width(s, 0.25f, 0);
+	CG_Text_Paint(320 - w / 2, 64 + BIGCHAR_HEIGHT, 0.25f, colorRed, s, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
 }
 #endif
 
@@ -2496,8 +2567,13 @@
 
 	if ( sec < 0 ) {
 		s = "Waiting for players";		
+#ifdef MISSIONPACK
+		w = CG_Text_Width(s, 0.5f, 0);
+		CG_Text_Paint(320 - w / 2, 60, 0.5f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
+#else
 		w = CG_DrawStrlen( s ) * BIGCHAR_WIDTH;
 		CG_DrawBigString(320 - w / 2, 24, s, 1.0F);
+#endif
 		cg.warmupCount = 0;
 		return;
 	}
@@ -2519,8 +2595,8 @@
 		if ( ci1 && ci2 ) {
 			s = va( "%s vs %s", ci1->name, ci2->name );
 #ifdef MISSIONPACK
-			w = CG_Text_Width(s, 0.6f, 0);
-			CG_Text_Paint(320 - w / 2, 60, 0.6f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWEDMORE);
+			w = CG_Text_Width(s, 0.5f, 0);
+			CG_Text_Paint(320 - w / 2, 60, 0.5f, colorWhite, s, 0, 0, ITEM_TEXTSTYLE_SHADOWEDMORE);
 #else
 			w = CG_DrawStrlen( s );
 			if ( w > 640 / GIANT_WIDTH ) {
Index: code/cgame/cg_weapons.c
===================================================================
--- code/cgame/cg_weapons.c	(revision 3340)
+++ code/cgame/cg_weapons.c	(working copy)
@@ -22,7 +22,9 @@
 //
 // cg_weapons.c -- events and effects dealing with weapons
 #include "cg_local.h"
-
+#ifdef MISSIONPACK
+#include "../ui/ui_shared.h"
+#endif
 /*
 ==========================
 CG_MachineGunEjectBrass
@@ -1511,7 +1513,10 @@
 	int		x, y, w;
 	char	*name;
 	float	*color;
-	float	markerSize, iconSize, offsetSize, charWidth, charHeight;
+	float	markerSize, iconSize, offsetSize;
+#ifndef MISSIONPACK
+	float	charWidth, charHeight;
+#endif
 
 	CG_SetScreenPlacement(PLACE_CENTER, PLACE_BOTTOM);
 
@@ -1548,10 +1553,10 @@
 	markerSize = 40 * cg_drawWeaponBar.value;
 	iconSize = 32 * cg_drawWeaponBar.value;
 	offsetSize = (markerSize - iconSize) * 0.5f;
-
+#ifndef MISSIONPACK
 	charWidth = BIGCHAR_WIDTH * cg_drawWeaponBar.value;
 	charHeight = BIGCHAR_HEIGHT * cg_drawWeaponBar.value;
-
+#endif
 	for ( i = 1 ; i < MAX_WEAPONS ; i++ ) {
 		if ( !( bits & ( 1 << i ) ) ) {
 			continue;
@@ -1579,9 +1584,14 @@
 	if ( cg_weapons[ cg.weaponSelect ].item ) {
 		name = cg_weapons[ cg.weaponSelect ].item->pickup_name;
 		if ( name ) {
+#ifdef MISSIONPACK
+			w = CG_Text_Width(name, 0.25f, 0);
+			CG_Text_Paint(320 - w / 2, y - 12*cg_drawWeaponBar.value, 0.25f, color, name, 0, 0, ITEM_TEXTSTYLE_SHADOWED);
+#else
 			w = CG_DrawStrlen( name ) * charWidth;
 			x = ( SCREEN_WIDTH - w ) / 2;
 			CG_DrawStringExt(x, y - 22*cg_drawWeaponBar.value, name, color, qfalse, qtrue, charWidth, charHeight, 0 );
+#endif
 		}
 	}
 
