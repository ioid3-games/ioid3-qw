Index: code/cgame/cg_main.c
===================================================================
--- code/cgame/cg_main.c	(revision 3319)
+++ code/cgame/cg_main.c	(working copy)
@@ -333,10 +333,14 @@
 	{ &cg_noTaunt, "cg_noTaunt", "0", CVAR_ARCHIVE},
 #endif
 	{ &cg_noProjectileTrail, "cg_noProjectileTrail", "0", CVAR_ARCHIVE},
+#ifdef MISSIONPACK
 	{ &cg_oldRail, "cg_oldRail", "1", CVAR_ARCHIVE},
+#else
+	{ &cg_oldRail, "cg_oldRail", "2", CVAR_ARCHIVE},
+#endif
 	{ &cg_oldRocket, "cg_oldRocket", "1", CVAR_ARCHIVE},
 	{ &cg_oldPlasma, "cg_oldPlasma", "1", CVAR_ARCHIVE},
-	{ &cg_trueLightning, "cg_trueLightning", "0.0", CVAR_ARCHIVE}
+	{ &cg_trueLightning, "cg_trueLightning", "1", CVAR_ARCHIVE}
 //	{ &cg_pmove_fixed, "cg_pmove_fixed", "0", CVAR_USERINFO | CVAR_ARCHIVE }
 };
 
Index: code/cgame/cg_players.c
===================================================================
--- code/cgame/cg_players.c	(revision 3319)
+++ code/cgame/cg_players.c	(working copy)
@@ -1385,8 +1385,10 @@
 	vec3_t		legsAngles, torsoAngles, headAngles;
 	float		dest;
 	static	int	movementOffsets[8] = { 0, 22, 45, -22, 0, 22, -45, -22 };
+#ifdef MISSIONPACK
 	vec3_t		velocity;
 	float		speed;
+#endif
 	int			dir, clientNum;
 	clientInfo_t	*ci;
 
@@ -1447,7 +1449,7 @@
 			torsoAngles[PITCH] = 0.0f;
 		}
 	}
-
+#ifdef MISSIONPACK
 	// --------- roll -------------
 
 
@@ -1467,7 +1469,7 @@
 		side = speed * DotProduct( velocity, axis[0] );
 		legsAngles[PITCH] += side;
 	}
-
+#endif
 	//
 	clientNum = cent->currentState.clientNum;
 	if ( clientNum >= 0 && clientNum < MAX_CLIENTS ) {
Index: code/cgame/cg_weapons.c
===================================================================
--- code/cgame/cg_weapons.c	(revision 3319)
+++ code/cgame/cg_weapons.c	(working copy)
@@ -255,9 +255,49 @@
  
 	if (cg_oldRail.integer)
 	{
-		// nudge down a bit so it isn't exactly in center
-		re->origin[2] -= 8;
-		re->oldorigin[2] -= 8;
+#ifndef MISSIONPACK
+		// reimplementing the rail discs (removed in 1.30)
+		if (cg_oldRail.integer > 1)
+		{
+			le = CG_AllocLocalEntity();
+			
+			re = &le->refEntity;
+			
+			VectorCopy(start, re->origin);
+			VectorCopy(end, re->oldorigin);
+			
+			le->leType = LE_FADE_RGB;
+			le->startTime = cg.time;
+			le->endTime = cg.time + cg_railTrailTime.value;
+			le->lifeRate = 1.0 / (le->endTime - le->startTime);
+			
+			re->shaderTime = cg.time / 1000.0f;
+			re->reType = RT_RAIL_RINGS;
+			re->customShader = cgs.media.railRingsShader;
+			re->shaderRGBA[0] = ci->color1[0] * 255;
+			re->shaderRGBA[1] = ci->color1[1] * 255;
+			re->shaderRGBA[2] = ci->color1[2] * 255;
+			re->shaderRGBA[3] = 255;
+			
+			le->color[0] = ci->color1[0] * 0.75;
+			le->color[1] = ci->color1[1] * 0.75;
+			le->color[2] = ci->color1[2] * 0.75;
+			le->color[3] = 1.0f;
+			// alternatively, use the secondary color
+			if (cg_oldRail.integer > 2)
+			 {
+				re->shaderRGBA[0] = ci->color2[0] * 255;
+				re->shaderRGBA[1] = ci->color2[1] * 255;
+				re->shaderRGBA[2] = ci->color2[2] * 255;
+				re->shaderRGBA[3] = 255;
+				
+				le->color[0] = ci->color2[0] * 0.75;
+				le->color[1] = ci->color2[1] * 0.75;
+				le->color[2] = ci->color2[2] * 0.75;
+				le->color[3] = 1.0f;
+			}
+		}
+#endif
 		return;
 	}
 
@@ -684,7 +724,7 @@
 		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/lightning/lg_hum.wav", qfalse );
 
 		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/lightning/lg_fire.wav", qfalse );
-		cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltNew");
+		cgs.media.lightningShader = trap_R_RegisterShader( "lightningBolt");
 		cgs.media.lightningExplosionModel = trap_R_RegisterModel( "models/weaphits/crackle.md3" );
 		cgs.media.sfx_lghit1 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit.wav", qfalse );
 		cgs.media.sfx_lghit2 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit2.wav", qfalse );
@@ -1227,7 +1267,14 @@
 			gun.shaderRGBA[3] = 255;
 		}
 		else {
+#ifndef MISSIONPACK
+			gun.shaderRGBA[0] = 255;
+			gun.shaderRGBA[1] = 255;
+			gun.shaderRGBA[2] = 255;
+			gun.shaderRGBA[3] = 255;
+#else
 			Byte4Copy( ci->c1RGBA, gun.shaderRGBA );
+#endif
 		}
 	}
 
Index: code/client/cl_console.c
===================================================================
--- code/client/cl_console.c	(revision 3319)
+++ code/client/cl_console.c	(working copy)
@@ -668,7 +668,7 @@
 	}
 
 	color[0] = 1;
-	color[1] = 0;
+	color[1] = 1;
 	color[2] = 0;
 	color[3] = 1;
 	SCR_FillRect( 0, y, SCREEN_WIDTH, 2, color );
@@ -676,7 +676,7 @@
 
 	// draw the version number
 
-	re.SetColor( g_color_table[ColorIndex(COLOR_RED)] );
+	re.SetColor( g_color_table[ColorIndex(COLOR_YELLOW)] );
 
 	i = strlen( Q3_VERSION );
 
@@ -696,7 +696,7 @@
 	if (con.display != con.current)
 	{
 	// draw arrows to show the buffer is backscrolled
-		re.SetColor( g_color_table[ColorIndex(COLOR_RED)] );
+		re.SetColor( g_color_table[ColorIndex(COLOR_YELLOW)] );
 		for (x=0 ; x<con.linewidth ; x+=4)
 			SCR_DrawSmallChar( con.xadjust + (x+1)*SMALLCHAR_WIDTH, y, '^' );
 		y -= SMALLCHAR_HEIGHT;
Index: code/client/cl_main.c
===================================================================
--- code/client/cl_main.c	(revision 3319)
+++ code/client/cl_main.c	(working copy)
@@ -3209,7 +3209,7 @@
 	Com_Printf( "----- Initializing Renderer ----\n" );
 
 #ifdef USE_RENDERER_DLOPEN
-	cl_renderer = Cvar_Get("cl_renderer", "opengl2", CVAR_ARCHIVE | CVAR_LATCH);
+	cl_renderer = Cvar_Get("cl_renderer", "opengl1", CVAR_ARCHIVE | CVAR_LATCH);
 
 	Com_sprintf(dllName, sizeof(dllName), "renderer_%s_" ARCH_STRING DLL_EXT, cl_renderer->string);
 
@@ -3218,7 +3218,7 @@
 		Com_Printf("failed:\n\"%s\"\n", Sys_LibraryError());
 		Cvar_ForceReset("cl_renderer");
 
-		Com_sprintf(dllName, sizeof(dllName), "renderer_opengl2_" ARCH_STRING DLL_EXT);
+		Com_sprintf(dllName, sizeof(dllName), "renderer_opengl1_" ARCH_STRING DLL_EXT);
 		rendererLib = Sys_LoadDll(dllName, qfalse);
 	}
 
@@ -3627,7 +3627,7 @@
 	Cvar_Get ("team_headmodel", "*james", CVAR_USERINFO | CVAR_ARCHIVE );
 	Cvar_Get ("g_redTeam", "Stroggs", CVAR_SERVERINFO | CVAR_ARCHIVE);
 	Cvar_Get ("g_blueTeam", "Pagans", CVAR_SERVERINFO | CVAR_ARCHIVE);
-	Cvar_Get ("color1",  "4", CVAR_USERINFO | CVAR_ARCHIVE );
+	Cvar_Get ("color1",  "5", CVAR_USERINFO | CVAR_ARCHIVE );
 	Cvar_Get ("color2", "5", CVAR_USERINFO | CVAR_ARCHIVE );
 	Cvar_Get ("handicap", "100", CVAR_USERINFO | CVAR_ARCHIVE );
 	Cvar_Get ("teamtask", "0", CVAR_USERINFO );
Index: code/game/g_bot.c
===================================================================
--- code/game/g_bot.c	(revision 3319)
+++ code/game/g_bot.c	(working copy)
@@ -705,7 +705,7 @@
 	key = "color1";
 	s = Info_ValueForKey( botinfo, key );
 	if ( !*s ) {
-		s = "4";
+		s = "5";
 	}
 	Info_SetValueForKey( userinfo, key, s );
 
