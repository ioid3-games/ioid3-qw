Index: code/cgame/cg_event.c
===================================================================
--- code/cgame/cg_event.c	(revision 3351)
+++ code/cgame/cg_event.c	(working copy)
@@ -318,6 +318,10 @@
 			message = "tried to invade";
 			message2 = "'s personal space";
 			break;
+		case MOD_GOOMBA:
+			message = "experienced death from above from";
+			message2 = "";
+			break;
 		default:
 			message = "was killed by";
 			break;
Index: code/game/bg_public.h
===================================================================
--- code/game/bg_public.h	(revision 3351)
+++ code/game/bg_public.h	(working copy)
@@ -620,6 +620,7 @@
 	MOD_CRUSH,
 	MOD_TELEFRAG,
 	MOD_FALLING,
+	MOD_GOOMBA,
 	MOD_SUICIDE,
 	MOD_TARGET_LASER,
 	MOD_TRIGGER_HURT,
Index: code/game/g_active.c
===================================================================
--- code/game/g_active.c	(revision 3351)
+++ code/game/g_active.c	(working copy)
@@ -538,7 +538,10 @@
 	int		i, j;
 	int		event;
 	gclient_t *client;
-	int		damage;
+	gentity_t *victim;
+	trace_t tr;
+	vec3_t	start, stop;
+	int		damage, goombaDmg, kb_time;
 	vec3_t	origin, angles;
 //	qboolean	fired;
 	gitem_t *item;
@@ -565,6 +568,18 @@
 			if ( g_dmflags.integer & DF_NO_FALLING ) {
 				break;
 			}
+
+			kb_time = 0;
+			victim = &level.gentities[ent->s.groundEntityNum];
+			// groundEntityNum won't be set to the entity number of a wounded player if you landed on one, trace to see if we're on a wounded player
+			if ( !victim->client ) {
+				VectorCopy (ent->r.currentOrigin, start );
+				VectorCopy( ent->r.currentOrigin, stop );
+				stop[2] -= 4;
+				trap_Trace ( &tr, start, NULL, NULL, stop, ent->s.number, MASK_SHOT );
+				victim = &level.gentities[tr.entityNum];
+			}
+
 			switch (event) {
 				case EV_FALL_DIE:
 					damage = 200;
@@ -571,25 +586,71 @@
 					break;
 				case EV_FALL_DMG_50:
 					damage = 50;
+					kb_time = 1000;
 					break;
 				case EV_FALL_DMG_25:
 					damage = 25;
+					kb_time = 500;
 					break;
 				case EV_FALL_DMG_15:
 					damage = 15;
+					kb_time = 250;
 					break;
 				case EV_FALL_DMG_10:
 					damage = 10;
+					kb_time = 100;
 					break;
 				case EV_FALL_DMG_5:
 					damage = 5;
+					kb_time = 50;
 					break;
 				default:
 					damage = 1; // never used
+					kb_time = 0;
 					break;
 			}
-			ent->pain_debounce_time = level.time + 200;	// no normal pain sound
-			G_Damage (ent, NULL, NULL, NULL, NULL, damage, 0, MOD_FALLING);
+
+			if (!victim || !victim->client || !victim->takedamage) {
+				if (damage) {
+					if (kb_time) {
+						ent->client->ps.pm_time = kb_time;
+					}
+					// no normal pain sound
+					ent->pain_debounce_time = level.time + 200;
+					G_Damage(ent, NULL, NULL, NULL, NULL, damage, 0, MOD_FALLING);
+				}
+		
+				return;
+			}
+			// do goomba damage to victim
+			if (!damage) {
+				damage = 5;
+			}
+
+			if (kb_time) {
+				victim->client->ps.pm_time = kb_time;
+				victim->client->ps.pm_flags |= PMF_TIME_KNOCKBACK;
+			}
+			// no normal pain sound
+			victim->pain_debounce_time = level.time + 200;
+			// do goomba damage
+			goombaDmg = damage;
+
+			if (damage > 50) {
+				goombaDmg = 50;
+			}
+
+			G_Damage(victim, ent, ent, NULL, NULL, goombaDmg, 0, MOD_GOOMBA);
+
+			if (damage > 5) {
+				G_AddEvent(victim, EV_GENERAL_SOUND, G_SoundIndex("sound/world/debris1.wav"));
+				// faller has a soft landing
+				damage *= 0.95f;
+				G_Damage(ent, NULL, NULL, NULL, NULL, damage, 0, MOD_FALLING);
+			} else {
+				G_AddEvent(victim, EV_GENERAL_SOUND, G_SoundIndex("sound/player/land_hurt.wav"));
+			}
+
 			break;
 
 		case EV_FIRE_WEAPON:
Index: code/game/g_combat.c
===================================================================
--- code/game/g_combat.c	(revision 3351)
+++ code/game/g_combat.c	(working copy)
@@ -301,6 +301,7 @@
 	"MOD_CRUSH",
 	"MOD_TELEFRAG",
 	"MOD_FALLING",
+	"MOD_GOOMBA",
 	"MOD_SUICIDE",
 	"MOD_TARGET_LASER",
 	"MOD_TRIGGER_HURT",
