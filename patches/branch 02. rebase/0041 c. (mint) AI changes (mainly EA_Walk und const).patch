Index: code/botlib/be_aas_bspq3.c
===================================================================
--- code/botlib/be_aas_bspq3.c	(revision 3425)
+++ code/botlib/be_aas_bspq3.c	(working copy)
@@ -80,57 +80,6 @@
 //global bsp
 bsp_t bspworld;
 
-
-#ifdef BSP_DEBUG
-typedef struct cname_s
-{
-	int value;
-	char *name;
-} cname_t;
-
-cname_t contentnames[] =
-{
-	{CONTENTS_SOLID,"CONTENTS_SOLID"},
-	{CONTENTS_WINDOW,"CONTENTS_WINDOW"},
-	{CONTENTS_AUX,"CONTENTS_AUX"},
-	{CONTENTS_LAVA,"CONTENTS_LAVA"},
-	{CONTENTS_SLIME,"CONTENTS_SLIME"},
-	{CONTENTS_WATER,"CONTENTS_WATER"},
-	{CONTENTS_MIST,"CONTENTS_MIST"},
-	{LAST_VISIBLE_CONTENTS,"LAST_VISIBLE_CONTENTS"},
-
-	{CONTENTS_AREAPORTAL,"CONTENTS_AREAPORTAL"},
-	{CONTENTS_PLAYERCLIP,"CONTENTS_PLAYERCLIP"},
-	{CONTENTS_MONSTERCLIP,"CONTENTS_MONSTERCLIP"},
-	{CONTENTS_CURRENT_0,"CONTENTS_CURRENT_0"},
-	{CONTENTS_CURRENT_90,"CONTENTS_CURRENT_90"},
-	{CONTENTS_CURRENT_180,"CONTENTS_CURRENT_180"},
-	{CONTENTS_CURRENT_270,"CONTENTS_CURRENT_270"},
-	{CONTENTS_CURRENT_UP,"CONTENTS_CURRENT_UP"},
-	{CONTENTS_CURRENT_DOWN,"CONTENTS_CURRENT_DOWN"},
-	{CONTENTS_ORIGIN,"CONTENTS_ORIGIN"},
-	{CONTENTS_MONSTER,"CONTENTS_MONSTER"},
-	{CONTENTS_DEADMONSTER,"CONTENTS_DEADMONSTER"},
-	{CONTENTS_DETAIL,"CONTENTS_DETAIL"},
-	{CONTENTS_TRANSLUCENT,"CONTENTS_TRANSLUCENT"},
-	{CONTENTS_LADDER,"CONTENTS_LADDER"},
-	{0, 0}
-};
-
-void PrintContents(int contents)
-{
-	int i;
-
-	for (i = 0; contentnames[i].value; i++)
-	{
-		if (contents & contentnames[i].value)
-		{
-			botimport.Print(PRT_MESSAGE, "%s\n", contentnames[i].name);
-		} //end if
-	} //end for
-} //end of the function PrintContents
-
-#endif // BSP_DEBUG
 //===========================================================================
 // traces axial boxes of any size through the world
 //
Index: code/botlib/be_ai_goal.c
===================================================================
--- code/botlib/be_ai_goal.c	(revision 3425)
+++ code/botlib/be_ai_goal.c	(working copy)
@@ -951,6 +951,7 @@
 // Returns:				-
 // Changes Globals:		-
 //===========================================================================
+#if 0
 void BotFindEntityForLevelItem(levelitem_t *li)
 {
 	int ent, modelindex;
@@ -962,6 +963,7 @@
 	if (!itemconfig) return;
 	for (ent = AAS_NextEntity(0); ent; ent = AAS_NextEntity(ent))
 	{
+		if (g_entities[ent].s.eType != ET_ITEM) continue;
 		//get the model index of the entity
 		modelindex = AAS_EntityModelindex(ent);
 		//
@@ -985,6 +987,7 @@
 		} //end if
 	} //end for
 } //end of the function BotFindEntityForLevelItem
+#endif
 //===========================================================================
 //
 // Parameter:			-
Index: code/botlib/be_ai_move.c
===================================================================
--- code/botlib/be_ai_move.c	(revision 3424)
+++ code/botlib/be_ai_move.c	(working copy)
@@ -93,10 +93,6 @@
 //prediction times
 #define PREDICTIONTIME_JUMP	3		//in seconds
 #define PREDICTIONTIME_MOVE	2		//in seconds
-//weapon indexes for weapon jumping
-#define WEAPONINDEX_ROCKET_LAUNCHER		5
-#define WEAPONINDEX_BFG					9
-
 #define MODELTYPE_FUNC_PLAT		1
 #define MODELTYPE_FUNC_BOB		2
 #define MODELTYPE_FUNC_DOOR		3
@@ -1360,7 +1356,6 @@
 	{
 		if (dist > 0) speed = 200 - (180 - 1 * dist);
 		else speed = 200;
-		EA_Walk(ms->client);
 	} //end if
 	else
 	{
@@ -1637,11 +1632,20 @@
 		if (reachhordist < 20)
 		{
 			if (dist > 64) dist = 64;
-			speed = 400 - (256 - 4 * dist);
+
+			if (ms->moveflags & MFL_WALK) {
+				speed = 200 - (128 - 2 * dist);
+			} else {
+				speed = 400 - (256 - 4 * dist);
+			}
 		} //end if
 		else
 		{
-			speed = 400;
+			if (ms->moveflags & MFL_WALK) {
+				speed = 200;
+			} else {
+				speed = 400;
+			}
 		} //end else
 	} //end else
 	//
@@ -2107,7 +2111,7 @@
 			//
 			if ((ms->moveflags & MFL_SWIMMING) || !BotCheckBarrierJump(ms, dir, 50))
 			{
-				if (speed > 5) EA_Move(ms->client, dir, speed);
+				if (dist > 5) EA_Move(ms->client, dir, speed);
 			} //end if
 			VectorCopy(dir, result.movedir);
 			//
@@ -2136,7 +2140,7 @@
 			//
 			if (!(ms->moveflags & MFL_SWIMMING) && !BotCheckBarrierJump(ms, dir, 50))
 			{
-				if (speed > 5) EA_Move(ms->client, dir, speed);
+				if (dist > 5) EA_Move(ms->client, dir, speed);
 			} //end if
 			VectorCopy(dir, result.movedir);
 			//
@@ -2310,7 +2314,7 @@
 			} //end if
 			VectorCopy(hordir, result.movedir);
 		} //end else
-		//if not really close to the center of the elevator
+		//if not really close to the center of the func_bobbing
 		else
 		{
 			MoverBottomCenter(reach, bottomcenter);
@@ -2323,7 +2327,7 @@
 #ifdef DEBUG_FUNCBOB
 				botimport.Print(PRT_MESSAGE, "bot moving to func_bobbing center\n");
 #endif
-				//move to the center of the plat
+				//move to the center of the func_bobbing
 				if (dist > 100) dist = 100;
 				speed = 400 - (400 - 4 * dist);
 				//
@@ -2350,7 +2354,7 @@
 			//if swimming or no barrier jump
 			if ((ms->moveflags & MFL_SWIMMING) || !BotCheckBarrierJump(ms, dir, 50))
 			{
-				if (speed > 5) EA_Move(ms->client, dir, speed);
+				if (dist > 5) EA_Move(ms->client, dir, speed);
 			} //end if
 			VectorCopy(dir, result.movedir);
 			//
@@ -2380,7 +2384,7 @@
 			//
 			if (!(ms->moveflags & MFL_SWIMMING) && !BotCheckBarrierJump(ms, dir, 50))
 			{
-				if (speed > 5) EA_Move(ms->client, dir, speed);
+				if (dist > 5) EA_Move(ms->client, dir, speed);
 			} //end if
 			VectorCopy(dir, result.movedir);
 			//
@@ -2390,7 +2394,7 @@
 			result.flags |= MOVERESULT_WAITING;
 			return result;
 		} //end if
-		//get direction and distance to func_bob bottom center
+		//get direction and distance to func_bobbing bottom center
 		MoverBottomCenter(reach, bottomcenter);
 		VectorSubtract(bottomcenter, ms->origin, dir2);
 		if (!(ms->moveflags & MFL_SWIMMING)) dir2[2] = 0;
@@ -2457,7 +2461,7 @@
 		if (dist > 60) dist = 60;
 		speed = 360 - (360 - 6 * dist);
 		//
-		if (speed > 5) EA_Move(ms->client, dir, speed);
+		if (dist > 5) EA_Move(ms->client, dir, speed);
 		VectorCopy(dir, result.movedir);
 		//
 		if (ms->moveflags & MFL_SWIMMING) result.flags |= MOVERESULT_SWIMVIEW;
@@ -2972,7 +2976,11 @@
 	//
 	dist = VectorNormalize(dir);
 	if (dist > 100) dist = 100;
-	speed = 400 - (400 - 4 * dist);
+	if (ms->moveflags & MFL_WALK) {
+		speed = 200 - (200 - 2 * dist);
+	} else {
+		speed = 400 - (400 - 4 * dist);
+	}
 	if (speed < 10) speed = 0;
 	//
 	BotCheckBlocked(ms, dir, qtrue, &result);
Index: code/botlib/be_ai_weight.c
===================================================================
--- code/botlib/be_ai_weight.c	(revision 3422)
+++ code/botlib/be_ai_weight.c	(working copy)
@@ -560,7 +560,7 @@
 // Returns:					-
 // Changes Globals:		-
 //===========================================================================
-int FindFuzzyWeight(weightconfig_t *wc, char *name)
+int FindFuzzyWeight(weightconfig_t *wc, const char *name)
 {
 	int i;
 
Index: code/botlib/be_ai_weight.h
===================================================================
--- code/botlib/be_ai_weight.h	(revision 3422)
+++ code/botlib/be_ai_weight.h	(working copy)
@@ -67,7 +67,7 @@
 //writes a weight configuration, returns true if successful
 qboolean WriteWeightConfig(char *filename, weightconfig_t *config);
 //find the fuzzy weight with the given name
-int FindFuzzyWeight(weightconfig_t *wc, char *name);
+int FindFuzzyWeight(weightconfig_t *wc, const char *name);
 //returns the fuzzy weight for the given inventory and weight
 float FuzzyWeight(int *inventory, weightconfig_t *wc, int weightnum);
 float FuzzyWeightUndecided(int *inventory, weightconfig_t *wc, int weightnum);
Index: code/botlib/be_ea.c
===================================================================
--- code/botlib/be_ea.c	(revision 3425)
+++ code/botlib/be_ea.c	(working copy)
@@ -268,20 +268,6 @@
 // Returns:				-
 // Changes Globals:		-
 //===========================================================================
-void EA_Walk(int client)
-{
-	bot_input_t *bi;
-
-	bi = &botinputs[client];
-
-	bi->actionflags |= ACTION_WALK;
-} //end of the function EA_Walk
-//===========================================================================
-//
-// Parameter:			-
-// Returns:				-
-// Changes Globals:		-
-//===========================================================================
 void EA_Action(int client, int action)
 {
 	bot_input_t *bi;
@@ -391,6 +377,10 @@
 	if (speed > MAX_USERMOVE) speed = MAX_USERMOVE;
 	else if (speed < -MAX_USERMOVE) speed = -MAX_USERMOVE;
 	bi->speed = speed;
+
+	if (speed <= 200) {
+		bi->actionflags |= ACTION_WALK;
+	}
 } //end of the function EA_Move
 //===========================================================================
 //
Index: code/botlib/be_ea.h
===================================================================
--- code/botlib/be_ea.h	(revision 3425)
+++ code/botlib/be_ea.h	(working copy)
@@ -37,7 +37,6 @@
 
 void EA_Action(int client, int action);
 void EA_Crouch(int client);
-void EA_Walk(int client);
 void EA_MoveUp(int client);
 void EA_MoveDown(int client);
 void EA_MoveForward(int client);
Index: code/botlib/l_precomp.c
===================================================================
--- code/botlib/l_precomp.c	(revision 3425)
+++ code/botlib/l_precomp.c	(working copy)
@@ -1336,7 +1336,7 @@
 // Returns:					-
 // Changes Globals:		-
 //============================================================================
-int PC_AddDefine(source_t *source, char *string)
+int PC_AddDefine(source_t *source, const char *string)
 {
 	define_t *define;
 
@@ -1409,7 +1409,7 @@
 // Returns:					-
 // Changes Globals:		-
 //============================================================================
-define_t *PC_CopyDefine(source_t *source, define_t *define)
+define_t *PC_CopyDefine(source_t *source, const define_t *define)
 {
 	define_t *newdefine;
 	token_t *token, *newtoken, *lasttoken;
@@ -2928,7 +2928,7 @@
 // Returns:					-
 // Changes Globals:		-
 //============================================================================
-source_t *LoadSourceMemory(char *ptr, int length, char *name)
+source_t *LoadSourceMemory(const char *ptr, int length, const char *name)
 {
 	source_t *source;
 	script_t *script;
Index: code/botlib/l_precomp.h
===================================================================
--- code/botlib/l_precomp.h	(revision 3425)
+++ code/botlib/l_precomp.h	(working copy)
@@ -126,7 +126,7 @@
 //returns true if there was a white space in front of the token
 int PC_WhiteSpaceBeforeToken(token_t *token);
 //add a define to the source
-int PC_AddDefine(source_t *source, char *string);
+int PC_AddDefine(source_t *source, const char *string);
 //add a globals define that will be added to all opened sources
 int PC_AddGlobalDefine(const char *string);
 //remove the given global define
@@ -144,7 +144,7 @@
 //load a source file
 source_t *LoadSourceFile(const char *filename);
 //load a source from memory
-source_t *LoadSourceMemory(char *ptr, int length, char *name);
+source_t *LoadSourceMemory(const char *ptr, int length, const char *name);
 //free the given source
 void FreeSource(source_t *source);
 //print a source error
Index: code/botlib/l_script.c
===================================================================
--- code/botlib/l_script.c	(revision 3425)
+++ code/botlib/l_script.c	(working copy)
@@ -143,7 +143,7 @@
 #ifdef DOLLAR
 	{"$",P_DOLLAR, NULL},
 #endif //DOLLAR
-	{NULL, 0}
+	{NULL, 0, NULL}
 };
 
 #ifdef BOTLIB
Index: code/server/sv_bot.c
===================================================================
--- code/server/sv_bot.c	(revision 3425)
+++ code/server/sv_bot.c	(working copy)
@@ -388,7 +388,7 @@
 SV_BotClientCommand
 ==================
 */
-static void BotClientCommand( int client, char *command ) {
+static void BotClientCommand( int client, const char *command ) {
 	SV_ExecuteClientCommand( &svs.clients[client], command, qtrue );
 }
 
