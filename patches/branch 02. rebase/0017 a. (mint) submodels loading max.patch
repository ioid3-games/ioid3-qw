Index: code/botlib/be_ai_move.c
===================================================================
--- code/botlib/be_ai_move.c	(revision 3375)
+++ code/botlib/be_ai_move.c	(working copy)
@@ -112,7 +112,7 @@
 libvar_t *cmd_grappleoff;
 libvar_t *cmd_grappleon;
 //type of model, func_plat or func_bobbing
-int modeltypes[MAX_MODELS];
+int modeltypes[MAX_SUBMODELS];
 
 bot_movestate_t *botmovestates[MAX_CLIENTS+1];
 
@@ -513,7 +513,7 @@
 	int ent, modelnum;
 	char classname[MAX_EPAIRKEY], model[MAX_EPAIRKEY];
 
-	Com_Memset(modeltypes, 0, MAX_MODELS * sizeof(int));
+	Com_Memset(modeltypes, 0, MAX_SUBMODELS * sizeof(int));
 	//
 	for (ent = AAS_NextBSPEntity(0); ent; ent = AAS_NextBSPEntity(ent))
 	{
@@ -522,7 +522,7 @@
 		if (model[0]) modelnum = atoi(model+1);
 		else modelnum = 0;
 
-		if (modelnum < 0 || modelnum >= MAX_MODELS)
+		if (modelnum < 0 || modelnum >= MAX_SUBMODELS)
 		{
 			botimport.Print(PRT_MESSAGE, "entity %s model number out of range\n", classname);
 			continue;
@@ -3047,7 +3047,7 @@
 		if (ent != -1)
 		{
 			modelnum = AAS_EntityModelindex(ent);
-			if (modelnum >= 0 && modelnum < MAX_MODELS)
+			if (modelnum >= 0 && modelnum < MAX_SUBMODELS)
 			{
 				modeltype = modeltypes[modelnum];
 
Index: code/cgame/cg_local.h
===================================================================
--- code/cgame/cg_local.h	(revision 3376)
+++ code/cgame/cg_local.h	(working copy)
@@ -1028,8 +1028,8 @@
 	sfxHandle_t		gameSounds[MAX_SOUNDS];
 
 	int				numInlineModels;
-	qhandle_t		inlineDrawModel[MAX_MODELS];
-	vec3_t			inlineModelMidpoints[MAX_MODELS];
+	qhandle_t		inlineDrawModel[MAX_SUBMODELS];
+	vec3_t			inlineModelMidpoints[MAX_SUBMODELS];
 
 	clientInfo_t	clientinfo[MAX_CLIENTS];
 
Index: code/cgame/cg_main.c
===================================================================
--- code/cgame/cg_main.c	(revision 3376)
+++ code/cgame/cg_main.c	(working copy)
@@ -1030,6 +1030,11 @@
 
 	// register the inline models
 	cgs.numInlineModels = trap_CM_NumInlineModels();
+
+	if ( cgs.numInlineModels > MAX_SUBMODELS ) {
+		CG_Error( "MAX_SUBMODELS (%d) exceeded by %d", MAX_SUBMODELS, cgs.numInlineModels - MAX_SUBMODELS );
+	}
+
 	for ( i = 1 ; i < cgs.numInlineModels ; i++ ) {
 		char	name[10];
 		vec3_t			mins, maxs;
Index: code/qcommon/cm_load.c
===================================================================
--- code/qcommon/cm_load.c	(revision 3375)
+++ code/qcommon/cm_load.c	(working copy)
@@ -134,10 +134,6 @@
 	cm.cmodels = Hunk_Alloc( count * sizeof( *cm.cmodels ), h_high );
 	cm.numSubModels = count;
 
-	if ( count > MAX_SUBMODELS ) {
-		Com_Error( ERR_DROP, "MAX_SUBMODELS exceeded" );
-	}
-
 	for ( i=0 ; i<count ; i++, in++)
 	{
 		out = &cm.cmodels[i];
@@ -685,11 +681,7 @@
 	if ( handle == BOX_MODEL_HANDLE ) {
 		return &box_model;
 	}
-	if ( handle < MAX_SUBMODELS ) {
-		Com_Error( ERR_DROP, "CM_ClipHandleToModel: bad handle %i < %i < %i", 
-			cm.numSubModels, handle, MAX_SUBMODELS );
-	}
-	Com_Error( ERR_DROP, "CM_ClipHandleToModel: bad handle %i", handle + MAX_SUBMODELS );
+	Com_Error( ERR_DROP, "CM_ClipHandleToModel: bad handle %i (max %d)", handle, cm.numSubModels );
 
 	return NULL;
 
Index: code/qcommon/cm_local.h
===================================================================
--- code/qcommon/cm_local.h	(revision 3375)
+++ code/qcommon/cm_local.h	(working copy)
@@ -24,9 +24,9 @@
 #include "qcommon.h"
 #include "cm_polylib.h"
 
-#define	MAX_SUBMODELS			256
-#define	BOX_MODEL_HANDLE		255
-#define CAPSULE_MODEL_HANDLE	254
+// fake submodel handles
+#define	BOX_MODEL_HANDLE		( cm.numSubModels )
+#define CAPSULE_MODEL_HANDLE	( cm.numSubModels + 1 )
 
 
 typedef struct {
Index: code/qcommon/msg.c
===================================================================
--- code/qcommon/msg.c	(revision 3375)
+++ code/qcommon/msg.c	(working copy)
@@ -772,13 +772,13 @@
 { NETF(origin[2]), 0 },
 { NETF(solid), 24 },
 { NETF(powerups), MAX_POWERUPS },
-{ NETF(modelindex), 8 },
+{ NETF(modelindex), MODELINDEX_BITS },
 { NETF(otherEntityNum2), GENTITYNUM_BITS },
 { NETF(loopSound), 8 },
 { NETF(origin2[2]), 0 },
 { NETF(origin2[0]), 0 },
 { NETF(origin2[1]), 0 },
-{ NETF(modelindex2), 8 },
+{ NETF(modelindex2), MODELINDEX_BITS },
 { NETF(angles[0]), 0 },
 { NETF(time), 32 },
 { NETF(apos.trTime), 32 },
Index: code/qcommon/q_shared.h
===================================================================
--- code/qcommon/q_shared.h	(revision 3375)
+++ code/qcommon/q_shared.h	(working copy)
@@ -1104,9 +1104,12 @@
 #define	ENTITYNUM_WORLD		(MAX_GENTITIES-2)
 #define	ENTITYNUM_MAX_NORMAL	(MAX_GENTITIES-2)
 
+#define	MODELINDEX_BITS		10
 
-#define	MAX_MODELS			256		// these are sent over the net as 8 bits
-#define	MAX_SOUNDS			256		// so they cannot be blindly increased
+// these are networked using the modelindex and/or modelindex2 field, must fit in MODELINDEX_BITS
+#define	MAX_SUBMODELS		1024	// max bsp models, q3map2 limits to 1024 via MAX_MAP_MODELS
+#define	MAX_MODELS			256		// max model filenames set by game VM
+#define	MAX_SOUNDS			256		// this is sent over the net as 8 bits (in eventParm) so they cannot be blindly increased
 
 
 #define	MAX_CONFIGSTRINGS	1024
