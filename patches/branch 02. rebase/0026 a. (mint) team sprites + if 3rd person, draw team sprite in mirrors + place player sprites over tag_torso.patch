Index: code/cgame/cg_local.h
===================================================================
--- code/cgame/cg_local.h	(revision 3410)
+++ code/cgame/cg_local.h	(working copy)
@@ -723,9 +723,8 @@
 	qhandle_t	railCoreShader;
 
 	qhandle_t	lightningShader;
-
-	qhandle_t	friendShader;
-
+	qhandle_t redFriendShader;
+	qhandle_t blueFriendShader;
 	qhandle_t	balloonShader;
 	qhandle_t	connectionShader;
 
Index: code/cgame/cg_main.c
===================================================================
--- code/cgame/cg_main.c	(revision 3410)
+++ code/cgame/cg_main.c	(working copy)
@@ -1021,7 +1021,8 @@
 #endif
 
 	if ( cgs.gametype >= GT_TEAM || cg_buildScript.integer ) {
-		cgs.media.friendShader = trap_R_RegisterShader( "sprites/foe" );
+		cgs.media.redFriendShader = trap_R_RegisterShader("sprites/team_red" );
+		cgs.media.blueFriendShader = trap_R_RegisterShader("sprites/team_blue" );
 		cgs.media.redQuadShader = trap_R_RegisterShader("powerups/blueflag" );
 		cgs.media.teamStatusBar = trap_R_RegisterShader( "gfx/2d/colorbar.tga" );
 #ifdef MISSIONPACK
Index: code/cgame/cg_players.c
===================================================================
--- code/cgame/cg_players.c	(revision 3410)
+++ code/cgame/cg_players.c	(working copy)
@@ -2146,19 +2146,11 @@
 Float a sprite over the player's head
 ===============
 */
-static void CG_PlayerFloatSprite( centity_t *cent, qhandle_t shader ) {
-	int				rf;
+static void CG_PlayerFloatSprite( vec3_t origin, int rf, qhandle_t shader ) {
 	refEntity_t		ent;
 
-	if ( cent->currentState.number == cg.snap->ps.clientNum && !cg.renderingThirdPerson ) {
-		rf = RF_ONLY_MIRROR;		// only show in mirrors
-	} else {
-		rf = 0;
-	}
-
 	memset( &ent, 0, sizeof( ent ) );
-	VectorCopy( cent->lerpOrigin, ent.origin );
-	ent.origin[2] += 48;
+	VectorCopy( origin, ent.origin );
 	ent.reType = RT_SPRITE;
 	ent.customShader = shader;
 	ent.radius = 10;
@@ -2179,46 +2171,71 @@
 Float sprites over the player's head
 ===============
 */
-static void CG_PlayerSprites( centity_t *cent ) {
+static void CG_PlayerSprites( centity_t *cent, const refEntity_t *parent ) {
+	int		friendFlags, awardFlags, thirdPersonFlags;
 	int		team;
+	vec3_t	origin;
 
+	VectorCopy( parent->origin, origin );
+	origin[2] += 42;
+
+	if ( cent->currentState.number == cg.snap->ps.clientNum ) {
+		// current player's team sprite should only be shown in mirrors
+		friendFlags = RF_ONLY_MIRROR;
+
+		if ( !cg.renderingThirdPerson ) {
+			thirdPersonFlags = RF_ONLY_MIRROR;
+		} else {
+			thirdPersonFlags = 0;
+		}
+
+		// if first person or drawing awards on HUD, only show your award sprites in mirrors
+		if ( !cg.renderingThirdPerson || cg_draw2D.integer ) {
+			awardFlags = RF_ONLY_MIRROR;
+		} else {
+			awardFlags = 0;
+		}
+	} else {
+		friendFlags = awardFlags = thirdPersonFlags = 0;
+	}
+
 	if ( cent->currentState.eFlags & EF_CONNECTION ) {
-		CG_PlayerFloatSprite( cent, cgs.media.connectionShader );
+		CG_PlayerFloatSprite( origin, thirdPersonFlags, cgs.media.connectionShader );
 		return;
 	}
 
 	if ( cent->currentState.eFlags & EF_TALK ) {
-		CG_PlayerFloatSprite( cent, cgs.media.balloonShader );
+		CG_PlayerFloatSprite( origin, thirdPersonFlags, cgs.media.balloonShader );
 		return;
 	}
 
 	if ( cent->currentState.eFlags & EF_AWARD_IMPRESSIVE ) {
-		CG_PlayerFloatSprite( cent, cgs.media.medalImpressive );
+		CG_PlayerFloatSprite( origin, awardFlags, cgs.media.medalImpressive );
 		return;
 	}
 
 	if ( cent->currentState.eFlags & EF_AWARD_EXCELLENT ) {
-		CG_PlayerFloatSprite( cent, cgs.media.medalExcellent );
+		CG_PlayerFloatSprite( origin, awardFlags, cgs.media.medalExcellent );
 		return;
 	}
 
 	if ( cent->currentState.eFlags & EF_AWARD_GAUNTLET ) {
-		CG_PlayerFloatSprite( cent, cgs.media.medalGauntlet );
+		CG_PlayerFloatSprite( origin, awardFlags, cgs.media.medalGauntlet );
 		return;
 	}
 
 	if ( cent->currentState.eFlags & EF_AWARD_DEFEND ) {
-		CG_PlayerFloatSprite( cent, cgs.media.medalDefend );
+		CG_PlayerFloatSprite( origin, awardFlags, cgs.media.medalDefend );
 		return;
 	}
 
 	if ( cent->currentState.eFlags & EF_AWARD_ASSIST ) {
-		CG_PlayerFloatSprite( cent, cgs.media.medalAssist );
+		CG_PlayerFloatSprite( origin, awardFlags, cgs.media.medalAssist );
 		return;
 	}
 
 	if ( cent->currentState.eFlags & EF_AWARD_CAP ) {
-		CG_PlayerFloatSprite( cent, cgs.media.medalCapture );
+		CG_PlayerFloatSprite( origin, awardFlags, cgs.media.medalCapture );
 		return;
 	}
 
@@ -2227,7 +2244,11 @@
 		cg.snap->ps.persistant[PERS_TEAM] == team &&
 		cgs.gametype >= GT_TEAM) {
 		if (cg_drawFriend.integer) {
-			CG_PlayerFloatSprite( cent, cgs.media.friendShader );
+			if (team == TEAM_BLUE) {
+				CG_PlayerFloatSprite(origin, friendFlags, cgs.media.blueFriendShader);
+			} else {
+				CG_PlayerFloatSprite(origin, friendFlags, cgs.media.redFriendShader);
+			}
 		}
 		return;
 	}
@@ -2536,8 +2557,6 @@
 	CG_PlayerAnimation( cent, &legs.oldframe, &legs.frame, &legs.backlerp,
 		 &torso.oldframe, &torso.frame, &torso.backlerp );
 
-	// add the talk baloon or disconnect icon
-	CG_PlayerSprites( cent );
 
 	// add the shadow
 	shadow = CG_PlayerShadow( cent, &shadowPlane );
@@ -2599,6 +2618,9 @@
 
 	torso.shaderRGBA[3] = 255; // leave powerup entity alpha alone
 
+	// add the talk baloon or disconnect icon
+	CG_PlayerSprites( cent, &torso );
+
 #ifdef MISSIONPACK
 	if ( cent->currentState.eFlags & EF_KAMIKAZE ) {
 
Index: code/ui/ui_players.c
===================================================================
--- code/ui/ui_players.c	(revision 3410)
+++ code/ui/ui_players.c	(working copy)
@@ -921,7 +921,7 @@
 	// add the chat icon
 	//
 	if ( pi->chat ) {
-		UI_PlayerFloatSprite( pi, origin, trap_R_RegisterShaderNoMip( "sprites/balloon3" ) );
+		UI_PlayerFloatSprite( pi, torso.origin, trap_R_RegisterShaderNoMip( "sprites/balloon3" ) );
 	}
 
 	//
