Index: code/game/g_misc.c
===================================================================
--- code/game/g_misc.c	(revision 3359)
+++ code/game/g_misc.c	(working copy)
@@ -153,6 +153,57 @@
 #endif
 }
 
+
+void locateMaster( gentity_t *ent ) {
+	ent->target_ent = G_PickTarget( ent->target );
+	if ( ent->target_ent ) {
+		ent->r.visDummyNum = ent->target_ent->s.number;
+	} else {
+		G_Printf( "Couldn't find target(%s) for misc_vis_dummy at %s\n", ent->target, vtos( ent->r.currentOrigin ) );
+		G_FreeEntity( ent );
+	}
+}
+
+/*QUAKED misc_vis_dummy (1 .5 0) (-8 -8 -8) (8 8 8)
+If this entity is "visible" (in player's PVS) then it's target is forced to be active whether it is in the player's PVS or not.
+This entity itself is never visible or transmitted to clients.
+For safety, you should have each dummy only point at one entity (however, it's okay to have many dummies pointing at one entity)
+*/
+void SP_misc_vis_dummy( gentity_t *ent ) {
+
+	if ( !ent->target ) {
+		G_Printf( "No target specified for misc_vis_dummy at %s\n", vtos( ent->r.currentOrigin ) );
+		G_FreeEntity( ent );
+		return;
+	}
+
+	ent->r.svFlags |= SVF_VISDUMMY;
+	G_SetOrigin( ent, ent->s.origin );
+	trap_LinkEntity( ent );
+
+	ent->think = locateMaster;
+	ent->nextthink = level.time + 1000;
+
+}
+
+/*QUAKED misc_vis_dummy_multiple (1 .5 0) (-8 -8 -8) (8 8 8)
+If this entity is "visible" (in player's PVS) then it's target is forced to be active whether it is in the player's PVS or not.
+This entity itself is never visible or transmitted to clients.
+This entity was created to have multiple speakers targeting it
+*/
+void SP_misc_vis_dummy_multiple( gentity_t *ent ) {
+	if ( !ent->targetname ) {
+		G_Printf( "misc_vis_dummy_multiple needs a targetname at %s\n", vtos( ent->r.currentOrigin ) );
+		G_FreeEntity( ent );
+		return;
+	}
+
+	ent->r.svFlags |= SVF_VISDUMMY_MULTIPLE;
+	G_SetOrigin( ent, ent->s.origin );
+	trap_LinkEntity( ent );
+
+}
+
 //===========================================================
 
 void locateCamera( gentity_t *ent ) {
Index: code/game/g_public.h
===================================================================
--- code/game/g_public.h	(revision 3362)
+++ code/game/g_public.h	(working copy)
@@ -47,9 +47,10 @@
 #define SVF_CAPSULE				0x00000400	// use capsule for collision detection instead of bbox
 #define SVF_NOTSINGLECLIENT		0x00000800	// send entity to everyone but one client
 											// (entityShared_t->singleClient)
+#define SVF_VISDUMMY            0x00001000  // this ent is a "visibility dummy" and needs it's master to be sent to players that can see it even if they can't see the master ent
+#define SVF_VISDUMMY_MULTIPLE   0x00002000  // so that one vis dummy can add to snapshot multiple speakers
 
 
-
 //===============================================================
 
 
@@ -87,8 +88,15 @@
 	// ent->r.ownerNum == passEntityNum	(don't interact with your own missiles)
 	// entity[ent->r.ownerNum].r.ownerNum == passEntityNum	(don't interact with other missiles from owner)
 	int			ownerNum;
+
+	// if set, entity is only sent to client if distance between entity and client <= cullDistance (even if SVF_BROADCAST is set)
+	int			cullDistance;
+
 	// if set, portal entities are only sent to client if distance between portal and player <= portalCullDistance
 	int			portalCullDistance;
+
+	// if SVF_VISDUMMY, number of master, else if not 0, it's the number of a target_vis_dummy_multiple.
+	int			visDummyNum;
 } entityShared_t;
 
 
Index: code/game/g_spawn.c
===================================================================
--- code/game/g_spawn.c	(revision 3361)
+++ code/game/g_spawn.c	(working copy)
@@ -163,6 +163,8 @@
 void SP_misc_model(gentity_t *ent);
 void SP_misc_portal_camera(gentity_t *ent);
 void SP_misc_portal_surface(gentity_t *ent);
+void SP_misc_vis_dummy( gentity_t *ent );
+void SP_misc_vis_dummy_multiple( gentity_t *ent );
 
 void SP_shooter_rocket( gentity_t *ent );
 void SP_shooter_plasma( gentity_t *ent );
@@ -236,6 +238,8 @@
 	{"misc_model", SP_misc_model},
 	{"misc_portal_surface", SP_misc_portal_surface},
 	{"misc_portal_camera", SP_misc_portal_camera},
+	{"misc_vis_dummy", SP_misc_vis_dummy},
+	{"misc_vis_dummy_multiple", SP_misc_vis_dummy_multiple},
 
 	{"shooter_rocket", SP_shooter_rocket},
 	{"shooter_grenade", SP_shooter_grenade},
Index: code/game/g_target.c
===================================================================
--- code/game/g_target.c	(revision 3359)
+++ code/game/g_target.c	(working copy)
@@ -166,7 +166,7 @@
 //==========================================================
 
 
-/*QUAKED target_speaker (1 0 0) (-8 -8 -8) (8 8 8) looped-on looped-off global activator
+/*QUAKED target_speaker (1 0 0) (-8 -8 -8) (8 8 8) LOOPED_ON LOOPED_OFF GLOBAL ACTIVATOR VIS_MULTIPLE
 "noise"		wav file to play
 
 A global sound will play full volume throughout the level.
@@ -195,6 +195,23 @@
 	}
 }
 
+void target_speaker_multiple( gentity_t *ent ) {
+	gentity_t *vis_dummy = NULL;
+
+	if ( !ent->target ) {
+		G_Error( "target_speaker missing target at pos %s", vtos( ent->s.origin ) );
+	}
+
+	vis_dummy = G_PickTarget( ent->target );
+
+	if ( vis_dummy ) {
+		ent->r.visDummyNum = vis_dummy->s.number;
+	} else {
+		G_Error( "target_speaker cant find vis_dummy_multiple %s", vtos( ent->s.origin ) );
+	}
+
+}
+
 void SP_target_speaker( gentity_t *ent ) {
 	char	buffer[MAX_QPATH];
 	char	*s;
@@ -237,6 +254,11 @@
 		ent->r.svFlags |= SVF_BROADCAST;
 	}
 
+	if ( ent->spawnflags & 16 ) {
+		ent->think = target_speaker_multiple;
+		ent->nextthink = level.time + 50;
+	}
+
 	VectorCopy( ent->s.origin, ent->s.pos.trBase );
 
 	// must link the entity so we get areas and clusters so
Index: code/server/sv_snapshot.c
===================================================================
--- code/server/sv_snapshot.c	(revision 3362)
+++ code/server/sv_snapshot.c	(working copy)
@@ -361,6 +361,15 @@
 			continue;
 		}
 
+		// limit based on distance
+		if ( ent->r.cullDistance ) {
+			vec3_t dir;
+			VectorSubtract(ent->s.origin, origin, dir);
+			if ( VectorLengthSquared(dir) > (float) ent->r.cullDistance * ent->r.cullDistance ) {
+				continue;
+			}
+		}
+
 		// broadcast entities are always sent
 		if ( ent->r.svFlags & SVF_BROADCAST ) {
 			SV_AddEntToSnapshot( svEnt, ent, eNums );
@@ -408,6 +417,70 @@
 			}
 		}
 
+		// visibility dummies
+		if ( ent->r.svFlags & SVF_VISDUMMY ) {
+			sharedEntity_t *ment = NULL;
+
+			// find master
+			ment = SV_GentityNum( ent->r.visDummyNum );
+
+			if ( ment ) {
+				svEntity_t *master = NULL;
+				master = SV_SvEntityForGentity( ment );
+
+				if ( master->snapshotCounter == sv.snapshotCounter || !ment->r.linked ) {
+					continue;
+				}
+
+				SV_AddEntToSnapshot( master, ment, eNums );
+			}
+
+			// master needs to be added, but not this dummy ent
+			continue;
+		} else if ( ent->r.svFlags & SVF_VISDUMMY_MULTIPLE ) {
+			int h;
+			sharedEntity_t *ment = NULL;
+			svEntity_t *master = NULL;
+
+			for ( h = 0; h < sv.num_entities; h++ ) {
+				ment = SV_GentityNum( h );
+
+				if ( ment == ent ) {
+					continue;
+				}
+
+				if ( ment ) {
+					master = SV_SvEntityForGentity( ment );
+				} else {
+					continue;
+				}
+
+				if ( !ment->r.linked ) {
+					continue;
+				}
+
+				if ( ment->s.number != h ) {
+					Com_DPrintf( "FIXING vis dummy multiple ment->S.NUMBER!!!\n" );
+					ment->s.number = h;
+				}
+
+				if ( ment->r.svFlags & SVF_NOCLIENT ) {
+					continue;
+				}
+
+				if ( master->snapshotCounter == sv.snapshotCounter ) {
+					continue;
+				}
+
+				if ( ment->r.visDummyNum == ent->s.number ) {
+					SV_AddEntToSnapshot( master, ment, eNums );
+				}
+			}
+
+			// masters need to be added, but not this dummy ent
+			continue;
+		}
+
 		// add it
 		SV_AddEntToSnapshot( svEnt, ent, eNums );
 
