Index: code/cgame/cg_consolecmds.c
===================================================================
--- code/cgame/cg_consolecmds.c	(revision 3359)
+++ code/cgame/cg_consolecmds.c	(working copy)
@@ -54,7 +54,8 @@
 =================
 */
 static void CG_SizeUp_f (void) {
-	trap_Cvar_Set("cg_viewsize", va("%i",(int)(cg_viewsize.integer+10)));
+	// manually clamp here so cvar range warning isn't shown
+	trap_Cvar_SetValue("cg_viewsize", Com_Clamp( 30, 100, (int)(cg_viewsize.integer+10) ) );
 }
 
 
@@ -66,7 +67,8 @@
 =================
 */
 static void CG_SizeDown_f (void) {
-	trap_Cvar_Set("cg_viewsize", va("%i",(int)(cg_viewsize.integer-10)));
+	// manually clamp here so cvar range warning isn't shown
+	trap_Cvar_SetValue("cg_viewsize", Com_Clamp( 30, 100, (int)(cg_viewsize.integer-10) ) );
 }
 
 
@@ -157,11 +159,11 @@
 
 
 static void CG_spWin_f( void) {
-	trap_Cvar_Set("cg_cameraOrbit", "2");
-	trap_Cvar_Set("cg_cameraOrbitDelay", "35");
-	trap_Cvar_Set("cg_thirdPerson", "1");
-	trap_Cvar_Set("cg_thirdPersonAngle", "0");
-	trap_Cvar_Set("cg_thirdPersonRange", "100");
+	trap_Cvar_SetValue("cg_cameraOrbit", 2);
+	trap_Cvar_SetValue("cg_cameraOrbitDelay", 35);
+	trap_Cvar_SetValue("cg_thirdPerson", 1);
+	trap_Cvar_SetValue("cg_thirdPersonAngle", 0);
+	trap_Cvar_SetValue("cg_thirdPersonRange", 100);
 	CG_AddBufferedSound(cgs.media.winnerSound);
 	//trap_S_StartLocalSound(cgs.media.winnerSound, CHAN_ANNOUNCER);
 	CG_CenterPrint("YOU WIN!", SCREEN_HEIGHT * .30, 0);
@@ -168,11 +170,11 @@
 }
 
 static void CG_spLose_f( void) {
-	trap_Cvar_Set("cg_cameraOrbit", "2");
-	trap_Cvar_Set("cg_cameraOrbitDelay", "35");
-	trap_Cvar_Set("cg_thirdPerson", "1");
-	trap_Cvar_Set("cg_thirdPersonAngle", "0");
-	trap_Cvar_Set("cg_thirdPersonRange", "100");
+	trap_Cvar_SetValue("cg_cameraOrbit", 2);
+	trap_Cvar_SetValue("cg_cameraOrbitDelay", 35);
+	trap_Cvar_SetValue("cg_thirdPerson", 1);
+	trap_Cvar_SetValue("cg_thirdPersonAngle", 0);
+	trap_Cvar_SetValue("cg_thirdPersonRange", 100);
 	CG_AddBufferedSound(cgs.media.loserSound);
 	//trap_S_StartLocalSound(cgs.media.loserSound, CHAN_ANNOUNCER);
 	CG_CenterPrint("YOU LOSE...", SCREEN_HEIGHT * .30, 0);
@@ -282,8 +284,8 @@
 
 
 static void CG_ConfirmOrder_f (void ) {
-	trap_SendConsoleCommand(va("cmd vtell %d %s\n", cgs.acceptLeader, VOICECHAT_YES));
-	trap_SendConsoleCommand("+button5; wait; -button5");
+	trap_Cmd_ExecuteText(EXEC_NOW, va("cmd vtell %d %s\n", cgs.acceptLeader, VOICECHAT_YES));
+	trap_Cmd_ExecuteText(EXEC_NOW, "+button5; wait; -button5");
 	if (cg.time < cgs.acceptOrderTime) {
 		trap_SendClientCommand(va("teamtask %d\n", cgs.acceptTask));
 		cgs.acceptOrderTime = 0;
@@ -291,8 +293,8 @@
 }
 
 static void CG_DenyOrder_f (void ) {
-	trap_SendConsoleCommand(va("cmd vtell %d %s\n", cgs.acceptLeader, VOICECHAT_NO));
-	trap_SendConsoleCommand("+button6; wait; -button6");
+	trap_Cmd_ExecuteText(EXEC_NOW, va("cmd vtell %d %s\n", cgs.acceptLeader, VOICECHAT_NO));
+	trap_Cmd_ExecuteText(EXEC_NOW, "+button6; wait; -button6");
 	if (cg.time < cgs.acceptOrderTime) {
 		cgs.acceptOrderTime = 0;
 	}
@@ -300,65 +302,65 @@
 
 static void CG_TaskOffense_f (void ) {
 	if (cgs.gametype == GT_CTF || cgs.gametype == GT_1FCTF) {
-		trap_SendConsoleCommand(va("cmd vsay_team %s\n", VOICECHAT_ONGETFLAG));
+		trap_Cmd_ExecuteText(EXEC_NOW, va("cmd vsay_team %s\n", VOICECHAT_ONGETFLAG));
 	} else {
-		trap_SendConsoleCommand(va("cmd vsay_team %s\n", VOICECHAT_ONOFFENSE));
+		trap_Cmd_ExecuteText(EXEC_NOW, va("cmd vsay_team %s\n", VOICECHAT_ONOFFENSE));
 	}
 	trap_SendClientCommand(va("teamtask %d\n", TEAMTASK_OFFENSE));
 }
 
 static void CG_TaskDefense_f (void ) {
-	trap_SendConsoleCommand(va("cmd vsay_team %s\n", VOICECHAT_ONDEFENSE));
+	trap_Cmd_ExecuteText(EXEC_NOW, va("cmd vsay_team %s\n", VOICECHAT_ONDEFENSE));
 	trap_SendClientCommand(va("teamtask %d\n", TEAMTASK_DEFENSE));
 }
 
 static void CG_TaskPatrol_f (void ) {
-	trap_SendConsoleCommand(va("cmd vsay_team %s\n", VOICECHAT_ONPATROL));
+	trap_Cmd_ExecuteText(EXEC_NOW, va("cmd vsay_team %s\n", VOICECHAT_ONPATROL));
 	trap_SendClientCommand(va("teamtask %d\n", TEAMTASK_PATROL));
 }
 
 static void CG_TaskCamp_f (void ) {
-	trap_SendConsoleCommand(va("cmd vsay_team %s\n", VOICECHAT_ONCAMPING));
+	trap_Cmd_ExecuteText(EXEC_NOW, va("cmd vsay_team %s\n", VOICECHAT_ONCAMPING));
 	trap_SendClientCommand(va("teamtask %d\n", TEAMTASK_CAMP));
 }
 
 static void CG_TaskFollow_f (void ) {
-	trap_SendConsoleCommand(va("cmd vsay_team %s\n", VOICECHAT_ONFOLLOW));
+	trap_Cmd_ExecuteText(EXEC_NOW, va("cmd vsay_team %s\n", VOICECHAT_ONFOLLOW));
 	trap_SendClientCommand(va("teamtask %d\n", TEAMTASK_FOLLOW));
 }
 
 static void CG_TaskRetrieve_f (void ) {
-	trap_SendConsoleCommand(va("cmd vsay_team %s\n", VOICECHAT_ONRETURNFLAG));
+	trap_Cmd_ExecuteText(EXEC_NOW, va("cmd vsay_team %s\n", VOICECHAT_ONRETURNFLAG));
 	trap_SendClientCommand(va("teamtask %d\n", TEAMTASK_RETRIEVE));
 }
 
 static void CG_TaskEscort_f (void ) {
-	trap_SendConsoleCommand(va("cmd vsay_team %s\n", VOICECHAT_ONFOLLOWCARRIER));
+	trap_Cmd_ExecuteText(EXEC_NOW, va("cmd vsay_team %s\n", VOICECHAT_ONFOLLOWCARRIER));
 	trap_SendClientCommand(va("teamtask %d\n", TEAMTASK_ESCORT));
 }
 
 static void CG_TaskOwnFlag_f (void ) {
-	trap_SendConsoleCommand(va("cmd vsay_team %s\n", VOICECHAT_IHAVEFLAG));
+	trap_Cmd_ExecuteText(EXEC_NOW, va("cmd vsay_team %s\n", VOICECHAT_IHAVEFLAG));
 }
 
 static void CG_TauntKillInsult_f (void ) {
-	trap_SendConsoleCommand("cmd vsay kill_insult\n");
+	trap_Cmd_ExecuteText(EXEC_NOW, "cmd vsay kill_insult\n");
 }
 
 static void CG_TauntPraise_f (void ) {
-	trap_SendConsoleCommand("cmd vsay praise\n");
+	trap_Cmd_ExecuteText(EXEC_NOW, "cmd vsay praise\n");
 }
 
 static void CG_TauntTaunt_f (void ) {
-	trap_SendConsoleCommand("cmd vtaunt\n");
+	trap_Cmd_ExecuteText(EXEC_NOW, "cmd vtaunt\n");
 }
 
 static void CG_TauntDeathInsult_f (void ) {
-	trap_SendConsoleCommand("cmd vsay death_insult\n");
+	trap_Cmd_ExecuteText(EXEC_NOW, "cmd vsay death_insult\n");
 }
 
 static void CG_TauntGauntlet_f (void ) {
-	trap_SendConsoleCommand("cmd vsay kill_gauntlet\n");
+	trap_Cmd_ExecuteText(EXEC_NOW, "cmd vsay kill_gauntlet\n");
 }
 
 static void CG_TaskSuicide_f (void ) {
@@ -421,13 +423,13 @@
 		return;
 	}
 	if (cg_cameraOrbit.value != 0) {
-		trap_Cvar_Set ("cg_cameraOrbit", "0");
-		trap_Cvar_Set("cg_thirdPerson", "0");
+		trap_Cvar_SetValue("cg_cameraOrbit", 0);
+		trap_Cvar_SetValue("cg_thirdPerson", 0);
 	} else {
-		trap_Cvar_Set("cg_cameraOrbit", "5");
-		trap_Cvar_Set("cg_thirdPerson", "1");
-		trap_Cvar_Set("cg_thirdPersonAngle", "0");
-		trap_Cvar_Set("cg_thirdPersonRange", "100");
+		trap_Cvar_SetValue("cg_cameraOrbit", 5);
+		trap_Cvar_SetValue("cg_thirdPerson", 1);
+		trap_Cvar_SetValue("cg_thirdPersonAngle", 0);
+		trap_Cvar_SetValue("cg_thirdPersonRange", 100);
 	}
 }
 
Index: code/cgame/cg_draw.c
===================================================================
--- code/cgame/cg_draw.c	(revision 3359)
+++ code/cgame/cg_draw.c	(working copy)
@@ -2508,7 +2508,7 @@
 		int t = cg.time - cg.voiceTime;
 		if ( t > 2500 ) {
 			Menus_CloseByName("voiceMenu");
-			trap_Cvar_Set("cl_conXOffset", "0");
+			trap_Cvar_SetValue("cl_conXOffset", 0);
 			cg.voiceTime = 0;
 		}
 	}
Index: code/cgame/cg_local.h
===================================================================
--- code/cgame/cg_local.h	(revision 3360)
+++ code/cgame/cg_local.h	(working copy)
@@ -1507,12 +1507,6 @@
 void		trap_FS_FCloseFile( fileHandle_t f );
 int			trap_FS_Seek( fileHandle_t f, long offset, int origin ); // fsOrigin_t
 
-// add commands to the local console as if they were typed in
-// for map changing, etc.  The command is not executed immediately,
-// but will be executed in order the next time console commands
-// are processed
-void		trap_SendConsoleCommand( const char *text );
-
 // send a string to the server over the network
 void		trap_SendClientCommand( const char *s );
 
Index: code/cgame/cg_main.c
===================================================================
--- code/cgame/cg_main.c	(revision 3359)
+++ code/cgame/cg_main.c	(working copy)
@@ -393,9 +393,9 @@
 		drawTeamOverlayModificationCount = cg_drawTeamOverlay.modificationCount;
 
 		if ( cg_drawTeamOverlay.integer > 0 ) {
-			trap_Cvar_Set( "teamoverlay", "1" );
+			trap_Cvar_SetValue( "teamoverlay", 1 );
 		} else {
-			trap_Cvar_Set( "teamoverlay", "0" );
+			trap_Cvar_SetValue( "teamoverlay", 0 );
 		}
 	}
 
@@ -1784,7 +1784,7 @@
 	//cgDC.setBinding = &trap_Key_SetBinding;
 	//cgDC.getBindingBuf = &trap_Key_GetBindingBuf;
 	//cgDC.keynumToStringBuf = &trap_Key_KeynumToStringBuf;
-	//cgDC.executeText = &trap_Cmd_ExecuteText;
+	cgDC.executeText = &trap_Cmd_ExecuteText;
 	cgDC.Error = &Com_Error; 
 	cgDC.Print = &Com_Printf; 
 	cgDC.ownerDrawWidth = &CG_OwnerDrawWidth;
Index: code/cgame/cg_newdraw.c
===================================================================
--- code/cgame/cg_newdraw.c	(revision 3359)
+++ code/cgame/cg_newdraw.c	(working copy)
@@ -100,20 +100,20 @@
 
 		if (cg_currentSelectedPlayer.integer == numSortedTeamPlayers) {
 			// to everyone
-			trap_SendConsoleCommand(va("cmd vsay_team %s\n", p2));
+			trap_Cmd_ExecuteText(EXEC_APPEND, va("cmd vsay_team %s\n", p2));
 		} else {
 			// for the player self
 			if (sortedTeamPlayers[cg_currentSelectedPlayer.integer] == cg.snap->ps.clientNum && p1) {
-				trap_SendConsoleCommand(va("teamtask %i\n", cgs.currentOrder));
-				//trap_SendConsoleCommand(va("cmd say_team %s\n", p2));
-				trap_SendConsoleCommand(va("cmd vsay_team %s\n", p1));
+				trap_Cmd_ExecuteText(EXEC_APPEND, va("teamtask %i\n", cgs.currentOrder));
+				//trap_Cmd_ExecuteText(EXEC_APPEND, va("cmd say_team %s\n", p2));
+				trap_Cmd_ExecuteText(EXEC_APPEND, va("cmd vsay_team %s\n", p1));
 			} else if (p2) {
-				//trap_SendConsoleCommand(va("cmd say_team %s, %s\n", ci->name,p));
-				trap_SendConsoleCommand(va("cmd vtell %d %s\n", sortedTeamPlayers[cg_currentSelectedPlayer.integer], p2));
+				//trap_Cmd_ExecuteText(EXEC_APPEND, va("cmd say_team %s, %s\n", ci->name,p));
+				trap_Cmd_ExecuteText(EXEC_APPEND, va("cmd vtell %d %s\n", sortedTeamPlayers[cg_currentSelectedPlayer.integer], p2));
 			}
 		}
 		if (b) {
-			trap_SendConsoleCommand(b);
+			trap_Cmd_ExecuteText(EXEC_APPEND, b);
 		}
 		cgs.orderPending = qfalse;
 	}
@@ -124,7 +124,7 @@
 		clientInfo_t *ci = cgs.clientinfo + sortedTeamPlayers[cg_currentSelectedPlayer.integer];
 	  if (ci) {
 			trap_Cvar_Set("cg_selectedPlayerName", ci->name);
-			trap_Cvar_Set("cg_selectedPlayer", va("%d", sortedTeamPlayers[cg_currentSelectedPlayer.integer]));
+			trap_Cvar_SetValue("cg_selectedPlayer", sortedTeamPlayers[cg_currentSelectedPlayer.integer]);
 			cgs.currentOrder = ci->teamTask;
 	  }
 	} else {
@@ -1809,7 +1809,7 @@
 	CG_AdjustFrom640( &x, &y, &w, &h );
 
 	Menus_OpenByName("voiceMenu");
-	trap_Cvar_Set("cl_conXOffset", va("%d", (int)x));
+	trap_Cvar_SetValue("cl_conXOffset", (int)x);
 	cg.voiceTime = cg.time;
 }
 
Index: code/cgame/cg_predict.c
===================================================================
--- code/cgame/cg_predict.c	(revision 3359)
+++ code/cgame/cg_predict.c	(working copy)
@@ -488,11 +488,11 @@
 	}
 
 	if ( pmove_msec.integer < 8 ) {
-		trap_Cvar_Set("pmove_msec", "8");
+		trap_Cvar_SetValue("pmove_msec", 8);
 		trap_Cvar_Update(&pmove_msec);
 	}
 	else if (pmove_msec.integer > 33) {
-		trap_Cvar_Set("pmove_msec", "33");
+		trap_Cvar_SetValue("pmove_msec", 33);
 		trap_Cvar_Update(&pmove_msec);
 	}
 
Index: code/cgame/cg_public.h
===================================================================
--- code/cgame/cg_public.h	(revision 3359)
+++ code/cgame/cg_public.h	(working copy)
@@ -78,6 +78,7 @@
 	CG_CVAR_REGISTER,
 	CG_CVAR_UPDATE,
 	CG_CVAR_SET,
+	CG_CVAR_SET_VALUE,
 	CG_CVAR_VARIABLESTRINGBUFFER,
 	CG_ARGC,
 	CG_ARGV,
@@ -86,7 +87,7 @@
 	CG_FS_READ,
 	CG_FS_WRITE,
 	CG_FS_FCLOSEFILE,
-	CG_SENDCONSOLECOMMAND,
+	CG_CMD_EXECUTETEXT,
 	CG_ADDCOMMAND,
 	CG_SENDCLIENTCOMMAND,
 	CG_UPDATESCREEN,
Index: code/cgame/cg_servercmds.c
===================================================================
--- code/cgame/cg_servercmds.c	(revision 3359)
+++ code/cgame/cg_servercmds.c	(working copy)
@@ -158,7 +158,7 @@
 
 	info = CG_ConfigString( CS_SERVERINFO );
 	cgs.gametype = atoi( Info_ValueForKey( info, "g_gametype" ) );
-	trap_Cvar_Set("g_gametype", va("%i", cgs.gametype));
+	trap_Cvar_SetValue("g_gametype", cgs.gametype);
 	cgs.dmflags = atoi( Info_ValueForKey( info, "dmflags" ) );
 	cgs.teamflags = atoi( Info_ValueForKey( info, "teamflags" ) );
 	cgs.fraglimit = atoi( Info_ValueForKey( info, "fraglimit" ) );
@@ -479,13 +479,13 @@
 	}
 #ifdef MISSIONPACK
 	if (cg_singlePlayerActive.integer) {
-		trap_Cvar_Set("ui_matchStartTime", va("%i", cg.time));
+		trap_Cvar_SetValue("ui_matchStartTime", cg.time);
 		if (cg_recordSPDemo.integer && *cg_recordSPDemoName.string) {
-			trap_SendConsoleCommand(va("set g_synchronousclients 1 ; record %s \n", cg_recordSPDemoName.string));
+			trap_Cmd_ExecuteText(EXEC_APPEND, va("set g_synchronousclients 1 ; record %s \n", cg_recordSPDemoName.string));
 		}
 	}
 #endif
-	trap_Cvar_Set("cg_thirdPerson", "0");
+	trap_Cvar_SetValue("cg_thirdPerson", 0);
 }
 
 #ifdef MISSIONPACK
Index: code/cgame/cg_syscalls.asm
===================================================================
--- code/cgame/cg_syscalls.asm	(revision 3359)
+++ code/cgame/cg_syscalls.asm	(working copy)
@@ -6,90 +6,91 @@
 equ	trap_Cvar_Register					-4
 equ	trap_Cvar_Update					-5
 equ	trap_Cvar_Set						-6
-equ trap_Cvar_VariableStringBuffer		-7
-equ	trap_Argc							-8
-equ	trap_Argv							-9
-equ	trap_Args							-10
-equ	trap_FS_FOpenFile					-11
-equ	trap_FS_Read						-12
-equ	trap_FS_Write						-13 
-equ	trap_FS_FCloseFile					-14
-equ	trap_SendConsoleCommand				-15
-equ	trap_AddCommand						-16
-equ	trap_SendClientCommand				-17
-equ	trap_UpdateScreen					-18
-equ	trap_CM_LoadMap						-19
-equ	trap_CM_NumInlineModels				-20
-equ	trap_CM_InlineModel					-21
-equ	trap_CM_LoadModel					-22
-equ	trap_CM_TempBoxModel				-23
-equ	trap_CM_PointContents				-24
-equ	trap_CM_TransformedPointContents	-25
-equ	trap_CM_BoxTrace					-26
-equ	trap_CM_TransformedBoxTrace			-27
-equ	trap_CM_MarkFragments				-28
-equ	trap_S_StartSound					-29
-equ	trap_S_StartLocalSound				-30
-equ	trap_S_ClearLoopingSounds			-31
-equ	trap_S_AddLoopingSound				-32
-equ	trap_S_UpdateEntityPosition			-33
-equ	trap_S_Respatialize					-34
-equ	trap_S_RegisterSound				-35
-equ	trap_S_StartBackgroundTrack			-36
-equ	trap_R_LoadWorldMap					-37
-equ	trap_R_RegisterModel				-38
-equ	trap_R_RegisterSkin					-39
-equ	trap_R_RegisterShader				-40
-equ	trap_R_ClearScene					-41
-equ	trap_R_AddRefEntityToScene			-42
-equ	trap_R_AddPolyToScene				-43
-equ	trap_R_AddLightToScene				-44
-equ	trap_R_RenderScene					-45
-equ	trap_R_SetColor						-46
-equ	trap_R_DrawStretchPic				-47
-equ	trap_R_ModelBounds					-48
-equ	trap_R_LerpTag						-49
-equ	trap_GetGlconfig					-50
-equ	trap_GetGameState					-51
-equ	trap_GetCurrentSnapshotNumber		-52
-equ	trap_GetSnapshot					-53
-equ	trap_GetServerCommand				-54
-equ	trap_GetCurrentCmdNumber			-55
-equ	trap_GetUserCmd						-56
-equ	trap_SetUserCmdValue				-57
-equ	trap_R_RegisterShaderNoMip			-58
-equ	trap_MemoryRemaining				-59
-equ trap_R_RegisterFont					-60
-equ trap_Key_IsDown						-61
-equ trap_Key_GetCatcher					-62
-equ trap_Key_SetCatcher					-63
-equ trap_Key_GetKey						-64
-equ trap_PC_AddGlobalDefine				-65
-equ	trap_PC_LoadSource					-66
-equ trap_PC_FreeSource					-67
-equ trap_PC_ReadToken					-68
-equ trap_PC_SourceFileAndLine			-69
-equ trap_S_StopBackgroundTrack			-70
-equ trap_RealTime						-71
-equ trap_SnapVector						-72
-equ trap_RemoveCommand					-73
-equ trap_R_LightForPoint				-74
-equ trap_CIN_PlayCinematic				-75
-equ trap_CIN_StopCinematic				-76
-equ trap_CIN_RunCinematic 				-77
-equ trap_CIN_DrawCinematic				-78
-equ trap_CIN_SetExtents					-79
-equ trap_R_RemapShader					-80
-equ	trap_S_AddRealLoopingSound			-81
-equ trap_S_StopLoopingSound				-82
-equ trap_CM_TempCapsuleModel			-83
-equ trap_CM_CapsuleTrace				-84
-equ trap_CM_TransformedCapsuleTrace		-85
-equ trap_R_AddAdditiveLightToScene		-86
-equ trap_GetEntityToken					-87
-equ	trap_R_AddPolysToScene				-88
-equ trap_R_inPVS						-89
-equ trap_FS_Seek			-90
+equ	trap_Cvar_SetValue					-7
+equ trap_Cvar_VariableStringBuffer		-8
+equ	trap_Argc							-9
+equ	trap_Argv							-10
+equ	trap_Args							-11
+equ	trap_FS_FOpenFile					-12
+equ	trap_FS_Read						-13
+equ	trap_FS_Write						-14
+equ	trap_FS_FCloseFile					-15
+equ	trap_Cmd_ExecuteText				-16
+equ	trap_AddCommand						-17
+equ	trap_SendClientCommand				-18
+equ	trap_UpdateScreen					-19
+equ	trap_CM_LoadMap						-20
+equ	trap_CM_NumInlineModels				-21
+equ	trap_CM_InlineModel					-22
+equ	trap_CM_LoadModel					-23
+equ	trap_CM_TempBoxModel				-24
+equ	trap_CM_PointContents				-25
+equ	trap_CM_TransformedPointContents	-26
+equ	trap_CM_BoxTrace					-27
+equ	trap_CM_TransformedBoxTrace			-28
+equ	trap_CM_MarkFragments				-29
+equ	trap_S_StartSound					-30
+equ	trap_S_StartLocalSound				-31
+equ	trap_S_ClearLoopingSounds			-32
+equ	trap_S_AddLoopingSound				-33
+equ	trap_S_UpdateEntityPosition			-34
+equ	trap_S_Respatialize					-35
+equ	trap_S_RegisterSound				-36
+equ	trap_S_StartBackgroundTrack			-37
+equ	trap_R_LoadWorldMap					-38
+equ	trap_R_RegisterModel				-39
+equ	trap_R_RegisterSkin					-40
+equ	trap_R_RegisterShader				-41
+equ	trap_R_ClearScene					-42
+equ	trap_R_AddRefEntityToScene			-43
+equ	trap_R_AddPolyToScene				-44
+equ	trap_R_AddLightToScene				-45
+equ	trap_R_RenderScene					-46
+equ	trap_R_SetColor						-47
+equ	trap_R_DrawStretchPic				-48
+equ	trap_R_ModelBounds					-49
+equ	trap_R_LerpTag						-50
+equ	trap_GetGlconfig					-51
+equ	trap_GetGameState					-52
+equ	trap_GetCurrentSnapshotNumber		-53
+equ	trap_GetSnapshot					-54
+equ	trap_GetServerCommand				-55
+equ	trap_GetCurrentCmdNumber			-56
+equ	trap_GetUserCmd						-57
+equ	trap_SetUserCmdValue				-58
+equ	trap_R_RegisterShaderNoMip			-59
+equ	trap_MemoryRemaining				-60
+equ trap_R_RegisterFont					-61
+equ trap_Key_IsDown						-62
+equ trap_Key_GetCatcher					-63
+equ trap_Key_SetCatcher					-64
+equ trap_Key_GetKey						-65
+equ trap_PC_AddGlobalDefine				-66
+equ	trap_PC_LoadSource					-67
+equ trap_PC_FreeSource					-68
+equ trap_PC_ReadToken					-69
+equ trap_PC_SourceFileAndLine			-70
+equ trap_S_StopBackgroundTrack			-71
+equ trap_RealTime						-72
+equ trap_SnapVector						-73
+equ trap_RemoveCommand					-74
+equ trap_R_LightForPoint				-75
+equ trap_CIN_PlayCinematic				-76
+equ trap_CIN_StopCinematic				-77
+equ trap_CIN_RunCinematic 				-78
+equ trap_CIN_DrawCinematic				-79
+equ trap_CIN_SetExtents					-80
+equ trap_R_RemapShader					-81
+equ	trap_S_AddRealLoopingSound			-82
+equ trap_S_StopLoopingSound				-83
+equ trap_CM_TempCapsuleModel			-84
+equ trap_CM_CapsuleTrace				-85
+equ trap_CM_TransformedCapsuleTrace		-86
+equ trap_R_AddAdditiveLightToScene		-87
+equ trap_GetEntityToken					-88
+equ	trap_R_AddPolysToScene				-89
+equ trap_R_inPVS						-90
+equ trap_FS_Seek			-91
 
 equ	memset						-101
 equ	memcpy						-102
Index: code/cgame/cg_syscalls.c
===================================================================
--- code/cgame/cg_syscalls.c	(revision 3359)
+++ code/cgame/cg_syscalls.c	(working copy)
@@ -69,6 +69,10 @@
 	syscall( CG_CVAR_SET, var_name, value );
 }
 
+void	trap_Cvar_SetValue( const char *var_name, float value ) {
+	syscall( CG_CVAR_SET_VALUE, var_name, PASSFLOAT( value ) );
+}
+
 void trap_Cvar_VariableStringBuffer( const char *var_name, char *buffer, int bufsize ) {
 	syscall( CG_CVAR_VARIABLESTRINGBUFFER, var_name, buffer, bufsize );
 }
@@ -105,8 +109,8 @@
 	return syscall( CG_FS_SEEK, f, offset, origin );
 }
 
-void	trap_SendConsoleCommand( const char *text ) {
-	syscall( CG_SENDCONSOLECOMMAND, text );
+void	trap_Cmd_ExecuteText( int exec_when, const char *text ) {
+	syscall( CG_CMD_EXECUTETEXT, exec_when, text );
 }
 
 void	trap_AddCommand( const char *cmdName ) {
Index: code/cgame/cg_view.c
===================================================================
--- code/cgame/cg_view.c	(revision 3359)
+++ code/cgame/cg_view.c	(working copy)
@@ -193,11 +193,11 @@
 	} else {
 		// bound normal viewsize
 		if (cg_viewsize.integer < 30) {
-			trap_Cvar_Set ("cg_viewsize","30");
 			size = 30;
+			trap_Cvar_SetValue("cg_viewsize", size);
 		} else if (cg_viewsize.integer > 100) {
-			trap_Cvar_Set ("cg_viewsize","100");
 			size = 100;
+			trap_Cvar_SetValue("cg_viewsize", size);
 		} else {
 			size = cg_viewsize.integer;
 		}
@@ -863,7 +863,7 @@
 				cg_timescale.value = cg_timescaleFadeEnd.value;
 		}
 		if (cg_timescaleFadeSpeed.value) {
-			trap_Cvar_Set("timescale", va("%f", cg_timescale.value));
+			trap_Cvar_SetValue("timescale", cg_timescale.value);
 		}
 	}
 
Index: code/client/cl_cgame.c
===================================================================
--- code/client/cl_cgame.c	(revision 3359)
+++ code/client/cl_cgame.c	(working copy)
@@ -426,6 +426,9 @@
 	case CG_CVAR_SET:
 		Cvar_SetSafe( VMA(1), VMA(2) );
 		return 0;
+	case CG_CVAR_SET_VALUE:
+		Cvar_SetValueSafe( VMA(1), VMF(2) );
+		return 0;
 	case CG_CVAR_VARIABLESTRINGBUFFER:
 		Cvar_VariableStringBuffer( VMA(1), VMA(2), args[3] );
 		return 0;
@@ -450,8 +453,8 @@
 		return 0;
 	case CG_FS_SEEK:
 		return FS_Seek( args[1], args[2], args[3] );
-	case CG_SENDCONSOLECOMMAND:
-		Cbuf_AddText( VMA(1) );
+	case CG_CMD_EXECUTETEXT:
+		Cbuf_ExecuteTextSafe( args[1], VMA(2) );
 		return 0;
 	case CG_ADDCOMMAND:
 		CL_AddCgameCommand( VMA(1) );
Index: code/client/cl_ui.c
===================================================================
--- code/client/cl_ui.c	(revision 3360)
+++ code/client/cl_ui.c	(working copy)
@@ -760,7 +760,7 @@
 		Cvar_VariableStringBuffer( VMA(1), VMA(2), args[3] );
 		return 0;
 
-	case UI_CVAR_SETVALUE:
+	case UI_CVAR_SET_VALUE:
 		Cvar_SetValueSafe( VMA(1), VMF(2) );
 		return 0;
 
@@ -792,15 +792,7 @@
 		return 0;
 
 	case UI_CMD_EXECUTETEXT:
-		if(args[1] == EXEC_NOW
-		&& (!strncmp(VMA(2), "snd_restart", 11)
-		|| !strncmp(VMA(2), "vid_restart", 11)
-		|| !strncmp(VMA(2), "quit", 5)))
-		{
-			Com_Printf (S_COLOR_YELLOW "turning EXEC_NOW '%.11s' into EXEC_INSERT\n", (const char*)VMA(2));
-			args[1] = EXEC_INSERT;
-		}
-		Cbuf_ExecuteText( args[1], VMA(2) );
+		Cbuf_ExecuteTextSafe( args[1], VMA(2) );
 		return 0;
 
 	case UI_FS_FOPENFILE:
Index: code/game/ai_main.c
===================================================================
--- code/game/ai_main.c	(revision 3359)
+++ code/game/ai_main.c	(working copy)
@@ -653,7 +653,7 @@
 	if (!strlen(bot_interbreedchar.string)) return;
 	//make sure we are in tournament mode
 	if (gametype != GT_TOURNAMENT) {
-		trap_Cvar_Set("g_gametype", va("%d", GT_TOURNAMENT));
+		trap_Cvar_SetValue("g_gametype", GT_TOURNAMENT);
 		ExitLevel();
 		return;
 	}
@@ -664,10 +664,10 @@
 		}
 	}
 	//make sure all item weight configs are reloaded and Not shared
-	trap_BotLibVarSet("bot_reloadcharacters", "1");
+	trap_Cvar_SetValue("bot_reloadcharacters", 1);
 	//add a number of bots using the desired bot character
 	for (i = 0; i < bot_interbreedbots.integer; i++) {
-		trap_SendConsoleCommand( EXEC_INSERT, va("addbot %s 4 free %i %s%d\n",
+		trap_Cmd_ExecuteText(EXEC_INSERT, va("addbot %s 4 free %i %s%d\n",
 						bot_interbreedchar.string, i * 50, bot_interbreedchar.string, i) );
 	}
 	//
@@ -1422,7 +1422,7 @@
 
 	if (bot_report.integer) {
 //		BotTeamplayReport();
-//		trap_Cvar_Set("bot_report", "0");
+//		trap_Cvar_SetValue("bot_report", 0);
 		BotUpdateInfoConfigStrings();
 	}
 
@@ -1447,17 +1447,17 @@
 
 	if (bot_memorydump.integer) {
 		trap_BotLibVarSet("memorydump", "1");
-		trap_Cvar_Set("bot_memorydump", "0");
+		trap_Cvar_SetValue("bot_memorydump", 0);
 	}
 	if (bot_saveroutingcache.integer) {
 		trap_BotLibVarSet("saveroutingcache", "1");
-		trap_Cvar_Set("bot_saveroutingcache", "0");
+		trap_Cvar_SetValue("bot_saveroutingcache", 0);
 	}
 	//check if bot interbreeding is activated
 	BotInterbreeding();
 	//cap the bot think time
 	if (bot_thinktime.integer > 200) {
-		trap_Cvar_Set("bot_thinktime", "200");
+		trap_Cvar_SetValue("bot_thinktime", 200);
 	}
 	//if the bot think time changed we should reschedule the bots
 	if (bot_thinktime.integer != lastbotthink_time) {
Index: code/game/bg_public.h
===================================================================
--- code/game/bg_public.h	(revision 3360)
+++ code/game/bg_public.h	(working copy)
@@ -743,5 +743,8 @@
 } dummyCmd_t;
 int cmdcmp( const void *a, const void *b );
 // register a command name so the console can perform command completion.
-void trap_AddCommand(const char *cmdName);
-void trap_RemoveCommand(const char *cmdName);
+void	trap_AddCommand( const char *cmdName );
+void	trap_RemoveCommand( const char *cmdName );
+
+void	trap_Cmd_ExecuteText( int exec_when, const char *text ); // ui: don't use EXEC_NOW!
+void	trap_Cvar_SetValue( const char *var_name, float value );
Index: code/game/g_active.c
===================================================================
--- code/game/g_active.c	(revision 3359)
+++ code/game/g_active.c	(working copy)
@@ -788,11 +788,11 @@
 	}
 
 	if ( pmove_msec.integer < 8 ) {
-		trap_Cvar_Set("pmove_msec", "8");
+		trap_Cvar_SetValue("pmove_msec", 8);
 		trap_Cvar_Update(&pmove_msec);
 	}
 	else if (pmove_msec.integer > 33) {
-		trap_Cvar_Set("pmove_msec", "33");
+		trap_Cvar_SetValue("pmove_msec", 33);
 		trap_Cvar_Update(&pmove_msec);
 	}
 
@@ -931,7 +931,7 @@
 				pm.cmd.rightmove = 0;
 				pm.cmd.upmove = 0;
 				if ( level.time - level.intermissionQueued >= 2000 && level.time - level.intermissionQueued <= 2500 ) {
-					trap_SendConsoleCommand( EXEC_APPEND, "centerview\n");
+					trap_Cmd_ExecuteText(EXEC_APPEND, "centerview\n");
 				}
 				ent->client->ps.pm_type = PM_SPINTERMISSION;
 			}
Index: code/game/g_arenas.c
===================================================================
--- code/game/g_arenas.c	(revision 3359)
+++ code/game/g_arenas.c	(working copy)
@@ -131,7 +131,7 @@
 		}
 		strcat( msg, buf );
 	}
-	trap_SendConsoleCommand( EXEC_APPEND, msg );
+	trap_Cmd_ExecuteText(EXEC_APPEND, msg );
 }
 
 
Index: code/game/g_bot.c
===================================================================
--- code/game/g_bot.c	(revision 3359)
+++ code/game/g_bot.c	(working copy)
@@ -225,7 +225,7 @@
 		skin = model;
 	}
 
-	trap_SendConsoleCommand( EXEC_APPEND, va( "play sound/player/announce/%s.wav\n", skin ) );
+	trap_Cmd_ExecuteText(EXEC_APPEND, va( "play sound/player/announce/%s.wav\n", skin ) );
 }
 
 /*
@@ -324,7 +324,7 @@
 	if (team == TEAM_RED) teamstr = "red";
 	else if (team == TEAM_BLUE) teamstr = "blue";
 	else teamstr = "free";
-	trap_SendConsoleCommand( EXEC_INSERT, va("addbot random %f %s %i\n", skill, teamstr, 0) );
+	trap_Cmd_ExecuteText(EXEC_INSERT, va("addbot random %f %s %i\n", skill, teamstr, 0) );
 }
 
 /*
@@ -347,7 +347,7 @@
 		if ( team >= 0 && cl->sess.sessionTeam != team ) {
 			continue;
 		}
-		trap_SendConsoleCommand( EXEC_INSERT, va("clientkick %d\n", i) );
+		trap_Cmd_ExecuteText(EXEC_INSERT, va("clientkick %d\n", i) );
 		return qtrue;
 	}
 	return qfalse;
@@ -856,12 +856,12 @@
 
 	skill = trap_Cvar_VariableValue( "g_spSkill" );
 	if( skill < 1 ) {
-		trap_Cvar_Set( "g_spSkill", "1" );
 		skill = 1;
+		trap_Cvar_SetValue( "g_spSkill", skill );
 	}
 	else if ( skill > 5 ) {
-		trap_Cvar_Set( "g_spSkill", "5" );
 		skill = 5;
+		trap_Cvar_SetValue( "g_spSkill", skill );
 	}
 
 	Q_strncpyz( bots, botList, sizeof(bots) );
@@ -889,7 +889,7 @@
 
 		// we must add the bot this way, calling G_AddBot directly at this stage
 		// does "Bad Things"
-		trap_SendConsoleCommand( EXEC_INSERT, va("addbot %s %f free %i\n", bot, skill, delay) );
+		trap_Cmd_ExecuteText(EXEC_INSERT, va("addbot %s %f free %i\n", bot, skill, delay) );
 
 		delay += BOT_BEGIN_DELAY_INCREMENT;
 	}
@@ -1032,7 +1032,7 @@
 			trap_Cvar_Set( "fraglimit", strValue );
 		}
 		else {
-			trap_Cvar_Set( "fraglimit", "0" );
+			trap_Cvar_SetValue( "fraglimit", 0 );
 		}
 
 		strValue = Info_ValueForKey( arenainfo, "timelimit" );
@@ -1041,12 +1041,12 @@
 			trap_Cvar_Set( "timelimit", strValue );
 		}
 		else {
-			trap_Cvar_Set( "timelimit", "0" );
+			trap_Cvar_SetValue( "timelimit", 0 );
 		}
 
 		if ( !fragLimit && !timeLimit ) {
-			trap_Cvar_Set( "fraglimit", "10" );
-			trap_Cvar_Set( "timelimit", "0" );
+			trap_Cvar_SetValue( "fraglimit", 10 );
+			trap_Cvar_SetValue( "timelimit", 0 );
 		}
 
 		basedelay = BOT_BEGIN_DELAY_BASE;
Index: code/game/g_client.c
===================================================================
--- code/game/g_client.c	(revision 3359)
+++ code/game/g_client.c	(working copy)
@@ -1310,7 +1310,7 @@
 		ent->client->sess.sessionTeam == TEAM_FREE &&
 		level.intermissiontime ) {
 
-		trap_SendConsoleCommand( EXEC_APPEND, "map_restart 0\n" );
+		trap_Cmd_ExecuteText(EXEC_APPEND, "map_restart 0\n" );
 		level.restarted = qtrue;
 		level.changemap = NULL;
 		level.intermissiontime = 0;
Index: code/game/g_cmds.c
===================================================================
--- code/game/g_cmds.c	(revision 3359)
+++ code/game/g_cmds.c	(working copy)
@@ -1352,7 +1352,7 @@
 		}
 
 		level.voteExecuteTime = 0;
-		trap_SendConsoleCommand( EXEC_APPEND, va("%s\n", level.voteString ) );
+		trap_Cmd_ExecuteText(EXEC_APPEND, va("%s\n", level.voteString ) );
 	}
 
 	// special case for g_gametype, check for bad values
Index: code/game/g_local.h
===================================================================
--- code/game/g_local.h	(revision 3360)
+++ code/game/g_local.h	(working copy)
@@ -762,7 +762,6 @@
 void	trap_FS_FCloseFile( fileHandle_t f );
 int		trap_FS_GetFileList( const char *path, const char *extension, char *listbuf, int bufsize );
 int		trap_FS_Seek( fileHandle_t f, long offset, int origin ); // fsOrigin_t
-void	trap_SendConsoleCommand( int exec_when, const char *text );
 void	trap_Cvar_Register( vmCvar_t *cvar, const char *var_name, const char *value, int flags );
 void	trap_Cvar_Update( vmCvar_t *cvar );
 void	trap_Cvar_Set( const char *var_name, const char *value );
Index: code/game/g_main.c
===================================================================
--- code/game/g_main.c	(revision 3360)
+++ code/game/g_main.c	(working copy)
@@ -358,7 +358,7 @@
 	// check some things
 	if ( g_gametype.integer < 0 || g_gametype.integer >= GT_MAX_GAME_TYPE ) {
 		G_Printf( "g_gametype %i is out of range, defaulting to 0\n", g_gametype.integer );
-		trap_Cvar_Set( "g_gametype", "0" );
+		trap_Cvar_SetValue( "g_gametype", 0 );
 		trap_Cvar_Update( &g_gametype );
 	}
 
@@ -1018,7 +1018,7 @@
 	}
 #ifdef MISSIONPACK
 	if (g_singlePlayer.integer) {
-		trap_Cvar_Set("ui_singlePlayerActive", "0");
+		trap_Cvar_SetValue("ui_singlePlayerActive", 0);
 		UpdateTournamentInfo();
 	}
 #else
@@ -1057,7 +1057,7 @@
 	if ( g_gametype.integer == GT_TOURNAMENT  ) {
 		if ( !level.restarted ) {
 			RemoveTournamentLoser();
-			trap_SendConsoleCommand( EXEC_APPEND, "map_restart 0\n" );
+			trap_Cmd_ExecuteText(EXEC_APPEND, "map_restart 0\n" );
 			level.restarted = qtrue;
 			level.changemap = NULL;
 			level.intermissiontime = 0;
@@ -1070,9 +1070,9 @@
 
 	if( !Q_stricmp( nextmap, "map_restart 0" ) && Q_stricmp( d1, "" ) ) {
 		trap_Cvar_Set( "nextmap", "vstr d2" );
-		trap_SendConsoleCommand( EXEC_APPEND, "vstr d1\n" );
+		trap_Cmd_ExecuteText(EXEC_APPEND, "vstr d1\n" );
 	} else {
-		trap_SendConsoleCommand( EXEC_APPEND, "vstr nextmap\n" );
+		trap_Cmd_ExecuteText(EXEC_APPEND, "vstr nextmap\n" );
 	}
 
 	level.changemap = NULL;
@@ -1208,7 +1208,7 @@
 				won = level.teamScores[TEAM_RED] > level.teamScores[TEAM_BLUE];
 			}
 		}
-		trap_SendConsoleCommand( EXEC_APPEND, (won) ? "spWin\n" : "spLose\n" );
+		trap_Cmd_ExecuteText(EXEC_APPEND, (won) ? "spWin\n" : "spLose\n" );
 	}
 #endif
 
@@ -1371,7 +1371,7 @@
 
 	if ( g_timelimit.integer < 0 || g_timelimit.integer > INT_MAX / 60000 ) {
 		G_Printf( "timelimit %i is out of range, defaulting to 0\n", g_timelimit.integer );
-		trap_Cvar_Set( "timelimit", "0" );
+		trap_Cvar_SetValue( "timelimit", 0 );
 		trap_Cvar_Update( &g_timelimit );
 	}
 
@@ -1385,7 +1385,7 @@
 
 	if ( g_fraglimit.integer < 0 ) {
 		G_Printf( "fraglimit %i is out of range, defaulting to 0\n", g_fraglimit.integer );
-		trap_Cvar_Set( "fraglimit", "0" );
+		trap_Cvar_SetValue( "fraglimit", 0 );
 		trap_Cvar_Update( &g_fraglimit );
 	}
 
@@ -1422,7 +1422,7 @@
 
 	if ( g_capturelimit.integer < 0 ) {
 		G_Printf( "capturelimit %i is out of range, defaulting to 0\n", g_capturelimit.integer );
-		trap_Cvar_Set( "capturelimit", "0" );
+		trap_Cvar_SetValue( "capturelimit", 0 );
 		trap_Cvar_Update( &g_capturelimit );
 	}
 
@@ -1512,8 +1512,8 @@
 		// if the warmup time has counted down, restart
 		if ( level.time > level.warmupTime ) {
 			level.warmupTime += 10000;
-			trap_Cvar_Set( "g_restarted", "1" );
-			trap_SendConsoleCommand( EXEC_APPEND, "map_restart 0\n" );
+			trap_Cvar_SetValue( "g_restarted", 1 );
+			trap_Cmd_ExecuteText(EXEC_APPEND, "map_restart 0\n" );
 			level.restarted = qtrue;
 			return;
 		}
@@ -1567,8 +1567,8 @@
 		// if the warmup time has counted down, restart
 		if ( level.time > level.warmupTime ) {
 			level.warmupTime += 10000;
-			trap_Cvar_Set( "g_restarted", "1" );
-			trap_SendConsoleCommand( EXEC_APPEND, "map_restart 0\n" );
+			trap_Cvar_SetValue( "g_restarted", 1 );
+			trap_Cmd_ExecuteText(EXEC_APPEND, "map_restart 0\n" );
 			level.restarted = qtrue;
 			return;
 		}
@@ -1584,7 +1584,7 @@
 void CheckVote( void ) {
 	if ( level.voteExecuteTime && level.voteExecuteTime < level.time ) {
 		level.voteExecuteTime = 0;
-		trap_SendConsoleCommand( EXEC_APPEND, va("%s\n", level.voteString ) );
+		trap_Cmd_ExecuteText(EXEC_APPEND, va("%s\n", level.voteString ) );
 	}
 	if ( !level.voteTime ) {
 		return;
@@ -1719,7 +1719,7 @@
 				SetLeader(team, atoi(level.teamVoteString[cs_offset] + 7));
 			}
 			else {
-				trap_SendConsoleCommand( EXEC_APPEND, va("%s\n", level.teamVoteString[cs_offset] ) );
+				trap_Cmd_ExecuteText(EXEC_APPEND, va("%s\n", level.teamVoteString[cs_offset] ) );
 			}
 		} else if ( level.teamVoteNo[cs_offset] >= level.numteamVotingClients[cs_offset]/2 ) {
 			// same behavior as a timeout
@@ -1746,9 +1746,9 @@
 	if ( g_password.modificationCount != lastMod ) {
 		lastMod = g_password.modificationCount;
 		if ( *g_password.string && Q_stricmp( g_password.string, "none" ) ) {
-			trap_Cvar_Set( "g_needpass", "1" );
+			trap_Cvar_SetValue( "g_needpass", 1 );
 		} else {
-			trap_Cvar_Set( "g_needpass", "0" );
+			trap_Cvar_SetValue( "g_needpass", 0 );
 		}
 	}
 }
@@ -1895,6 +1895,6 @@
 		for (i = 0; i < MAX_GENTITIES; i++) {
 			G_Printf("%4i: %s\n", i, g_entities[i].classname);
 		}
-		trap_Cvar_Set("g_listEntity", "0");
+		trap_Cvar_SetValue("g_listEntity", 0);
 	}
 }
Index: code/game/g_public.h
===================================================================
--- code/game/g_public.h	(revision 3360)
+++ code/game/g_public.h	(working copy)
@@ -122,6 +122,7 @@
 	G_CVAR_REGISTER,	// ( vmCvar_t *vmCvar, const char *varName, const char *defaultValue, int flags );
 	G_CVAR_UPDATE,	// ( vmCvar_t *vmCvar );
 	G_CVAR_SET,		// ( const char *var_name, const char *value );
+	G_CVAR_SET_VALUE,			// (const char *var_name, float value);
 	G_CVAR_VARIABLE_INTEGER_VALUE,	// ( const char *var_name );
 
 	G_CVAR_VARIABLE_STRING_BUFFER,	// ( const char *var_name, char *buffer, int bufsize );
@@ -137,7 +138,7 @@
 	G_FS_WRITE,		// ( const void *buffer, int len, fileHandle_t f );
 	G_FS_FCLOSE_FILE,		// ( fileHandle_t f );
 
-	G_SEND_CONSOLE_COMMAND,	// ( const char *text );
+	G_CMD_EXECUTETEXT,	// ( const char *text );
 	// add commands to the console as if they were typed in
 	// for map changing, etc
 
Index: code/game/g_rankings.c
===================================================================
--- code/game/g_rankings.c	(revision 3359)
+++ code/game/g_rankings.c	(working copy)
@@ -58,7 +58,7 @@
 			if ( ent->r.svFlags & SVF_BOT)
 			{
 				// no bots in ranked games
-				trap_SendConsoleCommand( EXEC_INSERT, va("kick %s\n", 
+				trap_Cmd_ExecuteText(EXEC_INSERT, va("kick %s\n", 
 					ent->client->pers.netname) );
 				continue;
 			}
@@ -143,7 +143,7 @@
 		if( ((g_fraglimit.integer == 0) || (g_fraglimit.integer > 100)) && 
 			((g_timelimit.integer == 0) || (g_timelimit.integer > 1000)) )
 		{
-			trap_Cvar_Set( "timelimit", "1000" );
+			trap_Cvar_SetValue( "timelimit", 1000 );
 		}
 	}
 
Index: code/game/g_session.c
===================================================================
--- code/game/g_session.c	(revision 3359)
+++ code/game/g_session.c	(working copy)
@@ -191,7 +191,7 @@
 void G_WriteSessionData( void ) {
 	int		i;
 
-	trap_Cvar_Set( "session", va("%i", g_gametype.integer) );
+	trap_Cvar_SetValue( "session", g_gametype.integer );
 
 	for ( i = 0 ; i < level.maxclients ; i++ ) {
 		if ( level.clients[i].pers.connected == CON_CONNECTED ) {
Index: code/game/g_spawn.c
===================================================================
--- code/game/g_spawn.c	(revision 3359)
+++ code/game/g_spawn.c	(working copy)
@@ -602,7 +602,7 @@
 	// see if we want a warmup time
 	trap_SetConfigstring( CS_WARMUP, "" );
 	if ( g_restarted.integer ) {
-		trap_Cvar_Set( "g_restarted", "0" );
+		trap_Cvar_SetValue( "g_restarted", 0 );
 		level.warmupTime = 0;
 	} else if ( g_doWarmup.integer ) { // Turn it on
 		level.warmupTime = -1;
Index: code/game/g_svcmds.c
===================================================================
--- code/game/g_svcmds.c	(revision 3360)
+++ code/game/g_svcmds.c	(working copy)
@@ -446,7 +446,7 @@
 =================
 */
 void	Svcmd_ListIPs_f( void ) {
-	trap_SendConsoleCommand( EXEC_NOW, "g_banIPs\n" );
+	trap_Cmd_ExecuteText(EXEC_NOW, "g_banIPs\n" );
 }
 
 struct svcmd
Index: code/game/g_syscalls.asm
===================================================================
--- code/game/g_syscalls.asm	(revision 3360)
+++ code/game/g_syscalls.asm	(working copy)
@@ -6,48 +6,49 @@
 equ	trap_Cvar_Register		-4
 equ	trap_Cvar_Update		-5
 equ	trap_Cvar_Set			-6
-equ	trap_Cvar_VariableIntegerValue	-7
-equ	trap_Cvar_VariableStringBuffer	-8
-equ	trap_Argc				-9
-equ	trap_Argv				-10
-equ trap_AddCommand			-11
-equ trap_RemoveCommand		-12
-equ	trap_FS_FOpenFile		-13
-equ	trap_FS_Read			-14
-equ	trap_FS_Write			-15
-equ	trap_FS_FCloseFile		-16
-equ	trap_SendConsoleCommand	-17
-equ	trap_LocateGameData		-18
-equ	trap_DropClient			-19
-equ	trap_SendServerCommand	-20
-equ	trap_SetConfigstring	-21
-equ	trap_GetConfigstring	-22
-equ	trap_GetUserinfo		-23
-equ	trap_SetUserinfo		-24
-equ	trap_GetServerinfo		-25
-equ	trap_SetBrushModel		-26
-equ	trap_Trace				-27
-equ	trap_PointContents		-28
-equ trap_InPVS				-29
-equ	trap_InPVSIgnorePortals	-30
-equ	trap_AdjustAreaPortalState	-31
-equ	trap_AreasConnected		-32
-equ	trap_LinkEntity			-33
-equ	trap_UnlinkEntity		-34
-equ	trap_EntitiesInBox		-35
-equ	trap_EntityContact		-36
-equ	trap_BotAllocateClient	-37
-equ	trap_BotFreeClient		-38
-equ	trap_GetUsercmd			-39
-equ	trap_GetEntityToken		-40
-equ	trap_FS_GetFileList		-41
-equ trap_DebugPolygonCreate	-42
-equ trap_DebugPolygonDelete	-43
-equ trap_RealTime			-44
-equ trap_SnapVector			-45
-equ trap_TraceCapsule		-46
-equ trap_EntityContactCapsule	-47
-equ trap_FS_Seek -48
+equ	trap_Cvar_SetValue		-7
+equ	trap_Cvar_VariableIntegerValue	-8
+equ	trap_Cvar_VariableStringBuffer	-9
+equ	trap_Argc				-10
+equ	trap_Argv				-11
+equ trap_AddCommand			-12
+equ trap_RemoveCommand		-13
+equ	trap_FS_FOpenFile		-14
+equ	trap_FS_Read			-15
+equ	trap_FS_Write			-16
+equ	trap_FS_FCloseFile		-17
+equ	trap_Cmd_ExecuteText	-18
+equ	trap_LocateGameData		-19
+equ	trap_DropClient			-20
+equ	trap_SendServerCommand	-21
+equ	trap_SetConfigstring	-22
+equ	trap_GetConfigstring	-23
+equ	trap_GetUserinfo		-24
+equ	trap_SetUserinfo		-25
+equ	trap_GetServerinfo		-26
+equ	trap_SetBrushModel		-27
+equ	trap_Trace				-28
+equ	trap_PointContents		-29
+equ trap_InPVS				-30
+equ	trap_InPVSIgnorePortals	-31
+equ	trap_AdjustAreaPortalState	-32
+equ	trap_AreasConnected		-33
+equ	trap_LinkEntity			-34
+equ	trap_UnlinkEntity		-35
+equ	trap_EntitiesInBox		-36
+equ	trap_EntityContact		-37
+equ	trap_BotAllocateClient	-38
+equ	trap_BotFreeClient		-39
+equ	trap_GetUsercmd			-40
+equ	trap_GetEntityToken		-41
+equ	trap_FS_GetFileList		-42
+equ trap_DebugPolygonCreate	-43
+equ trap_DebugPolygonDelete	-44
+equ trap_RealTime			-45
+equ trap_SnapVector			-46
+equ trap_TraceCapsule		-47
+equ trap_EntityContactCapsule	-48
+equ trap_FS_Seek -49
 
 equ	memset					-101
 equ	memcpy					-102
Index: code/game/g_syscalls.c
===================================================================
--- code/game/g_syscalls.c	(revision 3360)
+++ code/game/g_syscalls.c	(working copy)
@@ -95,8 +95,8 @@
 	return syscall( G_FS_SEEK, f, offset, origin );
 }
 
-void	trap_SendConsoleCommand( int exec_when, const char *text ) {
-	syscall( G_SEND_CONSOLE_COMMAND, exec_when, text );
+void	trap_Cmd_ExecuteText( int exec_when, const char *text ) {
+	syscall( G_CMD_EXECUTETEXT, exec_when, text );
 }
 
 void	trap_Cvar_Register( vmCvar_t *cvar, const char *var_name, const char *value, int flags ) {
@@ -111,6 +111,10 @@
 	syscall( G_CVAR_SET, var_name, value );
 }
 
+void trap_Cvar_SetValue( const char *var_name, float value ) {
+	syscall( G_CVAR_SET_VALUE, var_name, PASSFLOAT( value ) );
+}
+
 int trap_Cvar_VariableIntegerValue( const char *var_name ) {
 	return syscall( G_CVAR_VARIABLE_INTEGER_VALUE, var_name );
 }
Index: code/qcommon/cmd.c
===================================================================
--- code/qcommon/cmd.c	(revision 3359)
+++ code/qcommon/cmd.c	(working copy)
@@ -134,7 +134,23 @@
 	cmd_text.cursize += len;
 }
 
+/*
+============
+Cbuf_ExecuteTextSafe
+============
+*/
+void Cbuf_ExecuteTextSafe (int exec_when, const char *text)
+{
 
+	if ( exec_when == EXEC_NOW && (!strncmp(text, "snd_restart", 11) || !strncmp(text, "vid_restart", 11) || !strncmp(text, "quit", 5)) )
+	{
+		Com_Printf( S_COLOR_YELLOW "turning EXEC_NOW '%.11s' into EXEC_INSERT\n", text );
+		exec_when = EXEC_INSERT;
+	}
+
+	Cbuf_ExecuteText( exec_when, text );
+}
+
 /*
 ============
 Cbuf_ExecuteText
Index: code/qcommon/qcommon.h
===================================================================
--- code/qcommon/qcommon.h	(revision 3359)
+++ code/qcommon/qcommon.h	(working copy)
@@ -409,7 +409,8 @@
 
 void Cbuf_ExecuteText( int exec_when, const char *text );
 // this can be used in place of either Cbuf_AddText or Cbuf_InsertText
-
+void Cbuf_ExecuteTextSafe( int exec_when, const char *text );
+// used by VMs with special handling for unsafe calls
 void Cbuf_Execute (void);
 // Pulls off \n terminated lines of text from the command buffer and sends
 // them through Cmd_ExecuteString.  Stops when the buffer is empty.
Index: code/server/sv_game.c
===================================================================
--- code/server/sv_game.c	(revision 3360)
+++ code/server/sv_game.c	(working copy)
@@ -308,6 +308,9 @@
 	case G_CVAR_SET:
 		Cvar_SetSafe( (const char *)VMA(1), (const char *)VMA(2) );
 		return 0;
+	case G_CVAR_SET_VALUE:
+		Cvar_SetValueSafe( VMA(1), VMF(2) );
+		return 0;
 	case G_CVAR_VARIABLE_INTEGER_VALUE:
 		return Cvar_VariableIntegerValue( (const char *)VMA(1) );
 	case G_CVAR_VARIABLE_STRING_BUFFER:
@@ -327,8 +330,8 @@
 		Cmd_RemoveCommandSafe( VMA(1) );
 		return 0;
 
-	case G_SEND_CONSOLE_COMMAND:
-		Cbuf_ExecuteText( args[1], VMA(2) );
+	case G_CMD_EXECUTETEXT:
+		Cbuf_ExecuteTextSafe( args[1], VMA(2) );
 		return 0;
 
 	case G_FS_FOPEN_FILE:
Index: code/ui/ui_atoms.c
===================================================================
--- code/ui/ui_atoms.c	(revision 3359)
+++ code/ui/ui_atoms.c	(working copy)
@@ -113,36 +113,36 @@
 
 void UI_SetBestScores(postGameInfo_t *newInfo, qboolean postGame) {
 	trap_Cvar_Set("ui_scoreAccuracy",     va("%i%%", newInfo->accuracy));
-	trap_Cvar_Set("ui_scoreImpressives",	va("%i", newInfo->impressives));
-	trap_Cvar_Set("ui_scoreExcellents", 	va("%i", newInfo->excellents));
-	trap_Cvar_Set("ui_scoreDefends", 			va("%i", newInfo->defends));
-	trap_Cvar_Set("ui_scoreAssists", 			va("%i", newInfo->assists));
-	trap_Cvar_Set("ui_scoreGauntlets", 		va("%i", newInfo->gauntlets));
-	trap_Cvar_Set("ui_scoreScore", 				va("%i", newInfo->score));
-	trap_Cvar_Set("ui_scorePerfect",	 		va("%i", newInfo->perfects));
+	trap_Cvar_SetValue("ui_scoreImpressives",	newInfo->impressives);
+	trap_Cvar_SetValue("ui_scoreExcellents", 	newInfo->excellents);
+	trap_Cvar_SetValue("ui_scoreDefends", 			newInfo->defends);
+	trap_Cvar_SetValue("ui_scoreAssists", 			newInfo->assists);
+	trap_Cvar_SetValue("ui_scoreGauntlets", 		newInfo->gauntlets);
+	trap_Cvar_SetValue("ui_scoreScore", 				newInfo->score);
+	trap_Cvar_SetValue("ui_scorePerfect",	 		newInfo->perfects);
 	trap_Cvar_Set("ui_scoreTeam",					va("%i to %i", newInfo->redScore, newInfo->blueScore));
-	trap_Cvar_Set("ui_scoreBase",					va("%i", newInfo->baseScore));
-	trap_Cvar_Set("ui_scoreTimeBonus",		va("%i", newInfo->timeBonus));
-	trap_Cvar_Set("ui_scoreSkillBonus",		va("%i", newInfo->skillBonus));
-	trap_Cvar_Set("ui_scoreShutoutBonus",	va("%i", newInfo->shutoutBonus));
+	trap_Cvar_SetValue("ui_scoreBase",					newInfo->baseScore);
+	trap_Cvar_SetValue("ui_scoreTimeBonus",		newInfo->timeBonus);
+	trap_Cvar_SetValue("ui_scoreSkillBonus",		newInfo->skillBonus);
+	trap_Cvar_SetValue("ui_scoreShutoutBonus",	newInfo->shutoutBonus);
 	trap_Cvar_Set("ui_scoreTime",					va("%02i:%02i", newInfo->time / 60, newInfo->time % 60));
-	trap_Cvar_Set("ui_scoreCaptures",		va("%i", newInfo->captures));
+	trap_Cvar_SetValue("ui_scoreCaptures",		newInfo->captures);
   if (postGame) {
 		trap_Cvar_Set("ui_scoreAccuracy2",     va("%i%%", newInfo->accuracy));
-		trap_Cvar_Set("ui_scoreImpressives2",	va("%i", newInfo->impressives));
-		trap_Cvar_Set("ui_scoreExcellents2", 	va("%i", newInfo->excellents));
-		trap_Cvar_Set("ui_scoreDefends2", 			va("%i", newInfo->defends));
-		trap_Cvar_Set("ui_scoreAssists2", 			va("%i", newInfo->assists));
-		trap_Cvar_Set("ui_scoreGauntlets2", 		va("%i", newInfo->gauntlets));
-		trap_Cvar_Set("ui_scoreScore2", 				va("%i", newInfo->score));
-		trap_Cvar_Set("ui_scorePerfect2",	 		va("%i", newInfo->perfects));
+		trap_Cvar_SetValue("ui_scoreImpressives2",	newInfo->impressives);
+		trap_Cvar_SetValue("ui_scoreExcellents2", 	newInfo->excellents);
+		trap_Cvar_SetValue("ui_scoreDefends2", 			newInfo->defends);
+		trap_Cvar_SetValue("ui_scoreAssists2", 			newInfo->assists);
+		trap_Cvar_SetValue("ui_scoreGauntlets2", 		newInfo->gauntlets);
+		trap_Cvar_SetValue("ui_scoreScore2", 				newInfo->score);
+		trap_Cvar_SetValue("ui_scorePerfect2",	 		newInfo->perfects);
 		trap_Cvar_Set("ui_scoreTeam2",					va("%i to %i", newInfo->redScore, newInfo->blueScore));
-		trap_Cvar_Set("ui_scoreBase2",					va("%i", newInfo->baseScore));
-		trap_Cvar_Set("ui_scoreTimeBonus2",		va("%i", newInfo->timeBonus));
-		trap_Cvar_Set("ui_scoreSkillBonus2",		va("%i", newInfo->skillBonus));
-		trap_Cvar_Set("ui_scoreShutoutBonus2",	va("%i", newInfo->shutoutBonus));
+		trap_Cvar_SetValue("ui_scoreBase2",					newInfo->baseScore);
+		trap_Cvar_SetValue("ui_scoreTimeBonus2",		newInfo->timeBonus);
+		trap_Cvar_SetValue("ui_scoreSkillBonus2",		newInfo->skillBonus);
+		trap_Cvar_SetValue("ui_scoreShutoutBonus2",	newInfo->shutoutBonus);
 		trap_Cvar_Set("ui_scoreTime2",					va("%02i:%02i", newInfo->time / 60, newInfo->time % 60));
-		trap_Cvar_Set("ui_scoreCaptures2",		va("%i", newInfo->captures));
+		trap_Cvar_SetValue("ui_scoreCaptures2",		newInfo->captures);
 	}
 }
 
@@ -318,13 +318,13 @@
 	}
  
 	// put back all the ui overrides
-	trap_Cvar_Set("capturelimit", UI_Cvar_VariableString("ui_saveCaptureLimit"));
-	trap_Cvar_Set("fraglimit", UI_Cvar_VariableString("ui_saveFragLimit"));
-	trap_Cvar_Set("cg_drawTimer", UI_Cvar_VariableString("ui_drawTimer"));
-	trap_Cvar_Set("g_doWarmup", UI_Cvar_VariableString("ui_doWarmup"));
-	trap_Cvar_Set("g_Warmup", UI_Cvar_VariableString("ui_Warmup"));
-	trap_Cvar_Set("sv_pure", UI_Cvar_VariableString("ui_pure"));
-	trap_Cvar_Set("g_friendlyFire", UI_Cvar_VariableString("ui_friendlyFire"));
+	trap_Cvar_SetValue("capturelimit", trap_Cvar_VariableValue("ui_saveCaptureLimit"));
+	trap_Cvar_SetValue("fraglimit", trap_Cvar_VariableValue("ui_saveFragLimit"));
+	trap_Cvar_SetValue("cg_drawTimer", trap_Cvar_VariableValue("ui_drawTimer"));
+	trap_Cvar_SetValue("g_doWarmup", trap_Cvar_VariableValue("ui_doWarmup"));
+	trap_Cvar_SetValue("g_Warmup", trap_Cvar_VariableValue("ui_Warmup"));
+	trap_Cvar_SetValue("sv_pure", trap_Cvar_VariableValue("ui_pure"));
+	trap_Cvar_SetValue("g_friendlyFire", trap_Cvar_VariableValue("ui_friendlyFire"));
 
 	UI_SetBestScores(&newInfo, qtrue);
 	UI_ShowPostGame(newHigh);
Index: code/ui/ui_local.h
===================================================================
--- code/ui/ui_local.h	(revision 3359)
+++ code/ui/ui_local.h	(working copy)
@@ -925,13 +925,11 @@
 void			trap_Cvar_Set( const char *var_name, const char *value );
 float			trap_Cvar_VariableValue( const char *var_name );
 void			trap_Cvar_VariableStringBuffer( const char *var_name, char *buffer, int bufsize );
-void			trap_Cvar_SetValue( const char *var_name, float value );
 void			trap_Cvar_Reset( const char *name );
 void			trap_Cvar_Create( const char *var_name, const char *var_value, int flags );
 void			trap_Cvar_InfoStringBuffer( int bit, char *buffer, int bufsize );
 int				trap_Argc( void );
 void			trap_Argv( int n, char *buffer, int bufferLength );
-void			trap_Cmd_ExecuteText( int exec_when, const char *text );	// don't use EXEC_NOW!
 int				trap_FS_FOpenFile( const char *qpath, fileHandle_t *f, fsMode_t mode );
 void			trap_FS_Read( void *buffer, int len, fileHandle_t f );
 void			trap_FS_Write( const void *buffer, int len, fileHandle_t f );
Index: code/ui/ui_main.c
===================================================================
--- code/ui/ui_main.c	(revision 3359)
+++ code/ui/ui_main.c	(working copy)
@@ -566,8 +566,8 @@
 
 
 void UI_ShowPostGame(qboolean newHigh) {
-	trap_Cvar_Set ("cg_cameraOrbit", "0");
-	trap_Cvar_Set("cg_thirdPerson", "0");
+	trap_Cvar_SetValue("cg_cameraOrbit", 0);
+	trap_Cvar_SetValue("cg_thirdPerson", 0);
 	uiInfo.soundHighScore = newHigh;
   _UI_SetActiveMenu(UIMENU_POSTGAME);
 }
@@ -1042,11 +1042,11 @@
 		cap = 15;
 	}
 	if (uiVars) {
-		trap_Cvar_Set("ui_captureLimit", va("%d", cap));
-		trap_Cvar_Set("ui_fragLimit", va("%d", frag));
+		trap_Cvar_SetValue("ui_captureLimit", cap);
+		trap_Cvar_SetValue("ui_fragLimit", frag);
 	} else {
-		trap_Cvar_Set("capturelimit", va("%d", cap));
-		trap_Cvar_Set("fraglimit", va("%d", frag));
+		trap_Cvar_SetValue("capturelimit", cap);
+		trap_Cvar_SetValue("fraglimit", frag);
 	}
 }
 // ui_gameType assumes gametype 0 is -1 ALL and will not show
@@ -1056,8 +1056,8 @@
 
 static void UI_DrawNetGameType(rectDef_t *rect, float scale, vec4_t color, int textStyle) {
 	if (ui_netGameType.integer < 0 || ui_netGameType.integer > uiInfo.numGameTypes) {
-		trap_Cvar_Set("ui_netGameType", "0");
-		trap_Cvar_Set("ui_actualNetGameType", "0");
+		trap_Cvar_SetValue("ui_netGameType", 0);
+		trap_Cvar_SetValue("ui_actualNetGameType", 0);
 	}
   Text_Paint(rect->x, rect->y, scale, color, uiInfo.gameTypes[ui_netGameType.integer].gameType , 0, 0, textStyle);
 }
@@ -1064,7 +1064,7 @@
 
 static void UI_DrawJoinGameType(rectDef_t *rect, float scale, vec4_t color, int textStyle) {
 	if (ui_joinGameType.integer < 0 || ui_joinGameType.integer > uiInfo.numJoinGameTypes) {
-		trap_Cvar_Set("ui_joinGameType", "0");
+		trap_Cvar_SetValue("ui_joinGameType", 0);
 	}
   Text_Paint(rect->x, rect->y, scale, color, uiInfo.joinGameTypes[ui_joinGameType.integer].gameType , 0, 0, textStyle);
 }
@@ -1201,10 +1201,10 @@
 	if (map < 0 || map > uiInfo.mapCount) {
 		if (net) {
 			ui_currentNetMap.integer = 0;
-			trap_Cvar_Set("ui_currentNetMap", "0");
+			trap_Cvar_SetValue("ui_currentNetMap", 0);
 		} else {
 			ui_currentMap.integer = 0;
-			trap_Cvar_Set("ui_currentMap", "0");
+			trap_Cvar_SetValue("ui_currentMap", 0);
 		}
 		map = 0;
 	}
@@ -1225,7 +1225,7 @@
 	int minutes, seconds, time;
 	if (ui_currentMap.integer < 0 || ui_currentMap.integer > uiInfo.mapCount) {
 		ui_currentMap.integer = 0;
-		trap_Cvar_Set("ui_currentMap", "0");
+		trap_Cvar_SetValue("ui_currentMap", 0);
 	}
 
 	time = uiInfo.mapList[ui_currentMap.integer].timeToBeat[uiInfo.gameTypes[ui_gameType.integer].gtEnum];
@@ -1244,10 +1244,10 @@
 	if (map < 0 || map > uiInfo.mapCount) {
 		if (net) {
 			ui_currentNetMap.integer = 0;
-			trap_Cvar_Set("ui_currentNetMap", "0");
+			trap_Cvar_SetValue("ui_currentNetMap", 0);
 		} else {
 			ui_currentMap.integer = 0;
-			trap_Cvar_Set("ui_currentMap", "0");
+			trap_Cvar_SetValue("ui_currentMap", 0);
 		}
 		map = 0;
 	}
@@ -1333,7 +1333,7 @@
 static void UI_DrawNetMapCinematic(rectDef_t *rect, float scale, vec4_t color) {
 	if (ui_currentNetMap.integer < 0 || ui_currentNetMap.integer > uiInfo.mapCount) {
 		ui_currentNetMap.integer = 0;
-		trap_Cvar_Set("ui_currentNetMap", "0");
+		trap_Cvar_SetValue("ui_currentNetMap", 0);
 	}
 
 	if (uiInfo.serverStatus.currentServerCinematic >= 0) {
@@ -1820,7 +1820,7 @@
 	}
 
 	if (!uiInfo.teamLeader) {
-		trap_Cvar_Set("cg_selectedPlayer", va("%d", playerTeamNumber));
+		trap_Cvar_SetValue("cg_selectedPlayer", playerTeamNumber);
 	}
 
 	n = trap_Cvar_VariableValue("cg_selectedPlayer");
@@ -2960,36 +2960,36 @@
 
 	k = UI_TeamIndexFromName(UI_Cvar_VariableString("ui_opponentName"));
 
-	trap_Cvar_Set("ui_singlePlayerActive", "1");
+	trap_Cvar_SetValue("ui_singlePlayerActive", 1);
 
 	// set up sp overrides, will be replaced on postgame
 	temp = trap_Cvar_VariableValue( "capturelimit" );
-	trap_Cvar_Set("ui_saveCaptureLimit", va("%i", temp));
+	trap_Cvar_SetValue("ui_saveCaptureLimit", temp);
 	temp = trap_Cvar_VariableValue( "fraglimit" );
-	trap_Cvar_Set("ui_saveFragLimit", va("%i", temp));
+	trap_Cvar_SetValue("ui_saveFragLimit", temp);
 
 	UI_SetCapFragLimits(qfalse);
 
 	temp = trap_Cvar_VariableValue( "cg_drawTimer" );
-	trap_Cvar_Set("ui_drawTimer", va("%i", temp));
+	trap_Cvar_SetValue("ui_drawTimer", temp);
 	temp = trap_Cvar_VariableValue( "g_doWarmup" );
-	trap_Cvar_Set("ui_doWarmup", va("%i", temp));
+	trap_Cvar_SetValue("ui_doWarmup", temp);
 	temp = trap_Cvar_VariableValue( "g_friendlyFire" );
-	trap_Cvar_Set("ui_friendlyFire", va("%i", temp));
+	trap_Cvar_SetValue("ui_friendlyFire", temp);
 	temp = trap_Cvar_VariableValue( "sv_maxClients" );
-	trap_Cvar_Set("ui_maxClients", va("%i", temp));
+	trap_Cvar_SetValue("ui_maxClients", temp);
 	temp = trap_Cvar_VariableValue( "g_warmup" );
-	trap_Cvar_Set("ui_Warmup", va("%i", temp));
+	trap_Cvar_SetValue("ui_Warmup", temp);
 	temp = trap_Cvar_VariableValue( "sv_pure" );
-	trap_Cvar_Set("ui_pure", va("%i", temp));
+	trap_Cvar_SetValue("ui_pure", temp);
 
-	trap_Cvar_Set("cg_cameraOrbit", "0");
-	trap_Cvar_Set("cg_thirdPerson", "0");
-	trap_Cvar_Set("cg_drawTimer", "1");
-	trap_Cvar_Set("g_doWarmup", "1");
-	trap_Cvar_Set("g_warmup", "15");
-	trap_Cvar_Set("sv_pure", "0");
-	trap_Cvar_Set("g_friendlyFire", "0");
+	trap_Cvar_SetValue("cg_cameraOrbit", 0);
+	trap_Cvar_SetValue("cg_thirdPerson", 0);
+	trap_Cvar_SetValue("cg_drawTimer", 1);
+	trap_Cvar_SetValue("g_doWarmup", 1);
+	trap_Cvar_SetValue("g_warmup", 15);
+	trap_Cvar_SetValue("sv_pure", 0);
+	trap_Cvar_SetValue("g_friendlyFire", 0);
 	trap_Cvar_Set("g_redTeam", UI_Cvar_VariableString("ui_teamName"));
 	trap_Cvar_Set("g_blueTeam", UI_Cvar_VariableString("ui_opponentName"));
 
@@ -3001,12 +3001,12 @@
 	delay = 500;
 
 	if (g == GT_TOURNAMENT) {
-		trap_Cvar_Set("sv_maxClients", "2");
+		trap_Cvar_SetValue("sv_maxClients", 2);
 		Com_sprintf( buff, sizeof(buff), "wait ; addbot %s %f "", %i \n", uiInfo.mapList[ui_currentMap.integer].opponentName, skill, delay);
 		trap_Cmd_ExecuteText( EXEC_APPEND, buff );
 	} else {
 		temp = uiInfo.mapList[ui_currentMap.integer].teamMembers * 2;
-		trap_Cvar_Set("sv_maxClients", va("%d", temp));
+		trap_Cvar_SetValue("sv_maxClients", temp);
 		for (i =0; i < uiInfo.mapList[ui_currentMap.integer].teamMembers; i++) {
 			Com_sprintf( buff, sizeof(buff), "addbot %s %f %s %i %s\n", UI_AIFromName(uiInfo.teamList[k].teamMembers[i]), skill, (g == GT_FFA) ? "" : "Blue", delay, uiInfo.teamList[k].teamMembers[i]);
 			trap_Cmd_ExecuteText( EXEC_APPEND, buff );
@@ -3036,14 +3036,14 @@
  	} else if (Q_stricmp(name, "ui_setRate") == 0) {
 		float rate = trap_Cvar_VariableValue("rate");
 		if (rate >= 5000) {
-			trap_Cvar_Set("cl_maxpackets", "30");
-			trap_Cvar_Set("cl_packetdup", "1");
+			trap_Cvar_SetValue("cl_maxpackets", 30);
+			trap_Cvar_SetValue("cl_packetdup", 1);
 		} else if (rate >= 4000) {
-			trap_Cvar_Set("cl_maxpackets", "15");
-			trap_Cvar_Set("cl_packetdup", "2");		// favor less prediction errors when there's packet loss
+			trap_Cvar_SetValue("cl_maxpackets", 15);
+			trap_Cvar_SetValue("cl_packetdup", 2);		// favor less prediction errors when there's packet loss
 		} else {
-			trap_Cvar_Set("cl_maxpackets", "15");
-			trap_Cvar_Set("cl_packetdup", "1");		// favor lower bandwidth
+			trap_Cvar_SetValue("cl_maxpackets", 15);
+			trap_Cvar_SetValue("cl_packetdup", 1);		// favor lower bandwidth
 		}
  	} else if (Q_stricmp(name, "ui_GetName") == 0) {
 		trap_Cvar_Set( "ui_Name", UI_Cvar_VariableString("name"));
@@ -3166,9 +3166,9 @@
 		if (Q_stricmp(name, "StartServer") == 0) {
 			int i, clients, oldclients;
 			float skill;
-			trap_Cvar_Set("cg_thirdPerson", "0");
-			trap_Cvar_Set("cg_cameraOrbit", "0");
-			trap_Cvar_Set("ui_singlePlayerActive", "0");
+			trap_Cvar_SetValue("cg_thirdPerson", 0);
+			trap_Cvar_SetValue("cg_cameraOrbit", 0);
+			trap_Cvar_SetValue("ui_singlePlayerActive", 0);
 			trap_Cvar_SetValue( "dedicated", Com_Clamp( 0, 2, ui_dedicated.integer ) );
 			trap_Cvar_SetValue( "g_gametype", Com_Clamp( 0, GT_MAX_GAME_TYPE-1, uiInfo.gameTypes[ui_netGameType.integer].gtEnum ) );
 			trap_Cvar_Set("g_redTeam", UI_Cvar_VariableString("ui_teamName"));
@@ -3196,7 +3196,7 @@
 				clients = oldclients;
 			}
 
-			trap_Cvar_Set("sv_maxClients", va("%d",clients));
+			trap_Cvar_SetValue("sv_maxClients", clients);
 
 			for (i = 0; i < PLAYERS_PER_TEAM; i++) {
 				int bot = trap_Cvar_VariableValue( va("ui_blueteam%i", i+1));
@@ -3222,7 +3222,7 @@
 			UI_SetCapFragLimits(qtrue);
 			UI_MapCountByGameType(qtrue);
 			ui_mapIndex.integer = UI_GetIndexFromSelection(ui_currentMap.integer);
-			trap_Cvar_Set("ui_mapIndex", va("%d", ui_mapIndex.integer));
+			trap_Cvar_SetValue("ui_mapIndex", ui_mapIndex.integer);
 			Menu_SetFeederSelection(NULL, FEEDER_MAPS, ui_mapIndex.integer, "skirmish");
 			UI_GameType_HandleKey(0, NULL, K_MOUSE1, qfalse);
 			UI_GameType_HandleKey(0, NULL, K_MOUSE2, qfalse);
@@ -3231,7 +3231,7 @@
 			trap_Cmd_ExecuteText( EXEC_APPEND, "cvar_restart\n");
 			Controls_SetDefaults();
 #ifdef CINEMATICS_INTRO
-			trap_Cvar_Set("com_introPlayed", "1" );
+			trap_Cvar_SetValue("com_introPlayed", 1 );
 #endif
 			trap_Cmd_ExecuteText( EXEC_APPEND, "vid_restart\n" );
 		} else if (Q_stricmp(name, "getCDKey") == 0) {
@@ -3347,23 +3347,23 @@
 			uiInfo.serverStatusInfo.numLines = 0;
 			Menu_SetFeederSelection(NULL, FEEDER_FINDPLAYER, 0, NULL);
 		} else if (Q_stricmp(name, "JoinServer") == 0) {
-			trap_Cvar_Set("cg_thirdPerson", "0");
-			trap_Cvar_Set("cg_cameraOrbit", "0");
-			trap_Cvar_Set("ui_singlePlayerActive", "0");
+			trap_Cvar_SetValue("cg_thirdPerson", 0);
+			trap_Cvar_SetValue("cg_cameraOrbit", 0);
+			trap_Cvar_SetValue("ui_singlePlayerActive", 0);
 			if (uiInfo.serverStatus.currentServer >= 0 && uiInfo.serverStatus.currentServer < uiInfo.serverStatus.numDisplayServers) {
 				trap_LAN_GetServerAddressString(UI_SourceForLAN(), uiInfo.serverStatus.displayServers[uiInfo.serverStatus.currentServer], buff, 1024);
 				trap_Cmd_ExecuteText( EXEC_APPEND, va( "connect %s\n", buff ) );
 			}
 		} else if (Q_stricmp(name, "FoundPlayerJoinServer") == 0) {
-			trap_Cvar_Set("ui_singlePlayerActive", "0");
+			trap_Cvar_SetValue("ui_singlePlayerActive", 0);
 			if (uiInfo.currentFoundPlayerServer >= 0 && uiInfo.currentFoundPlayerServer < uiInfo.numFoundPlayerServers) {
 				trap_Cmd_ExecuteText( EXEC_APPEND, va( "connect %s\n", uiInfo.foundPlayerServerAddresses[uiInfo.currentFoundPlayerServer] ) );
 			}
 		} else if (Q_stricmp(name, "Quit") == 0) {
-			trap_Cvar_Set("ui_singlePlayerActive", "0");
+			trap_Cvar_SetValue("ui_singlePlayerActive", 0);
 			trap_Cmd_ExecuteText( EXEC_NOW, "quit");
 		} else if (Q_stricmp(name, "Controls") == 0) {
-		  trap_Cvar_Set( "cl_paused", "1" );
+		  trap_Cvar_SetValue( "cl_paused", 1 );
 			trap_Key_SetCatcher( KEYCATCH_UI );
 			Menus_CloseAll();
 			Menus_ActivateByName("setup_menu2");
@@ -3389,7 +3389,7 @@
 		} else if (Q_stricmp(name, "closeingame") == 0) {
 			trap_Key_SetCatcher( trap_Key_GetCatcher() & ~KEYCATCH_UI );
 			trap_Key_ClearStates();
-			trap_Cvar_Set( "cl_paused", "0" );
+			trap_Cvar_SetValue( "cl_paused", 0 );
 			Menus_CloseAll();
 		} else if (Q_stricmp(name, "voteMap") == 0) {
 			if (ui_currentNetMap.integer >=0 && ui_currentNetMap.integer < uiInfo.mapCount) {
@@ -3493,7 +3493,7 @@
 				}
 				trap_Key_SetCatcher( trap_Key_GetCatcher() & ~KEYCATCH_UI );
 				trap_Key_ClearStates();
-				trap_Cvar_Set( "cl_paused", "0" );
+				trap_Cvar_SetValue( "cl_paused", 0 );
 				Menus_CloseAll();
 			}
 		} else if (Q_stricmp(name, "voiceOrdersTeam") == 0) {
@@ -3506,7 +3506,7 @@
 				}
 				trap_Key_SetCatcher( trap_Key_GetCatcher() & ~KEYCATCH_UI );
 				trap_Key_ClearStates();
-				trap_Cvar_Set( "cl_paused", "0" );
+				trap_Cvar_SetValue( "cl_paused", 0 );
 				Menus_CloseAll();
 			}
 		} else if (Q_stricmp(name, "voiceOrders") == 0) {
@@ -3520,11 +3520,11 @@
 				}
 				trap_Key_SetCatcher( trap_Key_GetCatcher() & ~KEYCATCH_UI );
 				trap_Key_ClearStates();
-				trap_Cvar_Set( "cl_paused", "0" );
+				trap_Cvar_SetValue( "cl_paused", 0 );
 				Menus_CloseAll();
 			}
 		} else if (Q_stricmp(name, "glCustom") == 0) {
-			trap_Cvar_Set("ui_glCustom", "4");
+			trap_Cvar_SetValue("ui_glCustom", 4);
 		} else if (Q_stricmp(name, "update") == 0) {
 			if (String_Parse(args, &name2)) {
 				UI_Update(name2);
@@ -4076,7 +4076,7 @@
 		if (resend < 50) {
 			resend = 50;
 		}
-		trap_Cvar_Set("cl_serverStatusResendTime", va("%d", resend));
+		trap_Cvar_SetValue("cl_serverStatusResendTime", resend);
 		// reset all server status requests
 		trap_LAN_ServerStatus( NULL, NULL, 0);
 		//
@@ -4480,12 +4480,12 @@
 		  uiInfo.mapList[map].cinematic = -1;
 		}
 		UI_SelectedMap(index, &actual);
-		trap_Cvar_Set("ui_mapIndex", va("%d", index));
+		trap_Cvar_SetValue("ui_mapIndex", index);
 		ui_mapIndex.integer = index;
 
 		if (feederID == FEEDER_MAPS) {
 			ui_currentMap.integer = actual;
-			trap_Cvar_Set("ui_currentMap", va("%d", actual));
+			trap_Cvar_SetValue("ui_currentMap", actual);
 	  	uiInfo.mapList[ui_currentMap.integer].cinematic = trap_CIN_PlayCinematic(va("%s.roq", uiInfo.mapList[ui_currentMap.integer].mapLoadName), 0, 0, 0, 0, (CIN_loop | CIN_silent) );
 			UI_LoadBestScores(uiInfo.mapList[ui_currentMap.integer].mapLoadName, uiInfo.gameTypes[ui_gameType.integer].gtEnum);
 			trap_Cvar_Set("ui_opponentModel", uiInfo.mapList[ui_currentMap.integer].opponentName);
@@ -4492,7 +4492,7 @@
 			updateOpponentModel = qtrue;
 		} else {
 			ui_currentNetMap.integer = actual;
-			trap_Cvar_Set("ui_currentNetMap", va("%d", actual));
+			trap_Cvar_SetValue("ui_currentNetMap", actual);
 	  	uiInfo.mapList[ui_currentNetMap.integer].cinematic = trap_CIN_PlayCinematic(va("%s.roq", uiInfo.mapList[ui_currentNetMap.integer].mapLoadName), 0, 0, 0, 0, (CIN_loop | CIN_silent) );
 		}
 
@@ -4929,13 +4929,13 @@
 static void UI_Pause(qboolean b) {
 	if (b) {
 		// pause the game and set the ui keycatcher
-	  trap_Cvar_Set( "cl_paused", "1" );
+	  trap_Cvar_SetValue( "cl_paused", 1 );
 		trap_Key_SetCatcher( KEYCATCH_UI );
 	} else {
 		// unpause the game and clear the ui keycatcher
 		trap_Key_SetCatcher( trap_Key_GetCatcher() & ~KEYCATCH_UI );
 		trap_Key_ClearStates();
-		trap_Cvar_Set( "cl_paused", "0" );
+		trap_Cvar_SetValue( "cl_paused", 0 );
 	}
 }
 
@@ -5202,20 +5202,20 @@
 	if (uiInfo.currentCrosshair < 0) {
 		uiInfo.currentCrosshair = 0;
 	}
-	trap_Cvar_Set("ui_mousePitch", (trap_Cvar_VariableValue("m_pitch") >= 0) ? "0" : "1");
+	trap_Cvar_SetValue("ui_mousePitch", (trap_Cvar_VariableValue("m_pitch") >= 0) ? 0 : 1);
 
 	uiInfo.serverStatus.currentServerCinematic = -1;
 	uiInfo.previewMovie = -1;
 
 	if (trap_Cvar_VariableValue("ui_TeamArenaFirstRun") == 0) {
-		trap_Cvar_Set("s_volume", "0.8");
-		trap_Cvar_Set("s_musicvolume", "0.5");
-		trap_Cvar_Set("ui_TeamArenaFirstRun", "1");
+		trap_Cvar_SetValue("s_volume", 0.8);
+		trap_Cvar_SetValue("s_musicvolume", 0.5);
+		trap_Cvar_SetValue("ui_TeamArenaFirstRun", 1);
 	}
 
 	trap_Cvar_Register(NULL, "debug_protocol", "", 0 );
 
-	trap_Cvar_Set("ui_actualNetGameType", va("%d", ui_netGameType.integer));
+	trap_Cvar_SetValue("ui_actualNetGameType", ui_netGameType.integer);
 }
 
 
@@ -5237,7 +5237,7 @@
 		} else {
 			trap_Key_SetCatcher( trap_Key_GetCatcher() & ~KEYCATCH_UI );
 			trap_Key_ClearStates();
-			trap_Cvar_Set( "cl_paused", "0" );
+			trap_Cvar_SetValue( "cl_paused", 0 );
 		}
   }
 
@@ -5300,12 +5300,12 @@
 	  case UIMENU_NONE:
 			trap_Key_SetCatcher( trap_Key_GetCatcher() & ~KEYCATCH_UI );
 			trap_Key_ClearStates();
-			trap_Cvar_Set( "cl_paused", "0" );
+			trap_Cvar_SetValue( "cl_paused", 0 );
 			Menus_CloseAll();
 
 		  return;
 	  case UIMENU_MAIN:
-			trap_Cvar_Set( "sv_killserver", "1" );
+			trap_Cvar_SetValue( "sv_killserver", 1 );
 			trap_Key_SetCatcher( KEYCATCH_UI );
 			//trap_S_StartLocalSound( trap_S_RegisterSound("sound/misc/menu_background.wav", qfalse) , CHAN_LOCAL_SOUND );
 			//trap_S_StartBackgroundTrack("sound/misc/menu_background.wav", NULL);
@@ -5340,7 +5340,7 @@
 		  //UI_ConfirmMenu( "Bad CD Key", NULL, NeedCDKeyAction );
 		  return;
 	  case UIMENU_POSTGAME:
-			trap_Cvar_Set( "sv_killserver", "1" );
+			trap_Cvar_SetValue( "sv_killserver", 1 );
 			trap_Key_SetCatcher( KEYCATCH_UI );
 			if (uiInfo.inGameLoad) {
 				UI_LoadNonIngame();
@@ -5350,7 +5350,7 @@
 		  //UI_ConfirmMenu( "Bad CD Key", NULL, NeedCDKeyAction );
 		  return;
 	  case UIMENU_INGAME:
-		  trap_Cvar_Set( "cl_paused", "1" );
+		  trap_Cvar_SetValue( "cl_paused", 1 );
 			trap_Key_SetCatcher( KEYCATCH_UI );
 			UI_BuildPlayerList();
 			Menus_CloseAll();
Index: code/ui/ui_public.h
===================================================================
--- code/ui/ui_public.h	(revision 3360)
+++ code/ui/ui_public.h	(working copy)
@@ -41,7 +41,7 @@
 	UI_CVAR_SET,
 	UI_CVAR_VARIABLEVALUE,
 	UI_CVAR_VARIABLESTRINGBUFFER,
-	UI_CVAR_SETVALUE,
+	UI_CVAR_SET_VALUE,
 	UI_CVAR_RESET,
 	UI_CVAR_CREATE,
 	UI_ADDCOMMAND,
Index: code/ui/ui_syscalls.c
===================================================================
--- code/ui/ui_syscalls.c	(revision 3360)
+++ code/ui/ui_syscalls.c	(working copy)
@@ -78,7 +78,7 @@
 }
 
 void trap_Cvar_SetValue( const char *var_name, float value ) {
-	syscall( UI_CVAR_SETVALUE, var_name, PASSFLOAT( value ) );
+	syscall( UI_CVAR_SET_VALUE, var_name, PASSFLOAT( value ) );
 }
 
 void trap_Cvar_Reset( const char *name ) {
